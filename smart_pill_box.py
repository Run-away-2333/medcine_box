# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'smart_pill_box.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os.path
from datetime import datetime, time
import time as this_thread
import serial
import cv2
import threading
import re
import asyncio
import json
import queue
import redis
from enum import Enum

import numpy as np
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt, QTimer, QRegularExpression
from PyQt6.QtGui import QPixmap
from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout,
                             QPushButton, QLabel, QApplication)

import mysql.connector
from mysql.connector import Error
from typing import List

# 自己的包
import face_rec
import finger_rec
import gesture_rec
import model
from base_moudle import com_port as com
from base_moudle import SMTP
import face_rec_model

with open("./config.json") as json_file:  # 配置文件
    init_config = json.load(json_file)

# 用药时间
test_time = init_config['test_time']
test_expire_time = init_config['expire_time']
medicate_time = (
    '占位符', ("12:00-14:00", ""), ("08:00-10:00", "18:00-20:00"), ("07:00-09:00", "12:00-14:00", "18:00-20:00"))
use_medicine_time = ("07:00", "08:00", "12:00", "18:00", test_time)
expire_time = ("09:00", "10:00", "14:00", "20:00", test_expire_time)
personal_sex_map = {1: '先生', 0: '女士'}

com_a = None  # 串口A, arduino

lock_guard = threading.Lock()
medicate_queue = queue.Queue()  # 用药信息队列
use_medicine_tip_queue = queue.Queue()  # 提示用药队列
use_medicine_status = queue.Queue()  # 用药状态
map_expire_accurate = [[], []]  # 已过期和已服用键值[[状态], [信息]]

main_current_dir = os.getcwd()


class TextColor(Enum):
    m_no_time: str = 'blue'  # 未到点
    m_take_time: str = 'yellow'  # 可服用
    m_take_complete: str = 'green'  # 已服用
    m_expire_time: str = 'red'  # 已过期


class MedicineBox(object):
    mysql_log: str = ""
    pushButton_9_flag = True  # 性别计数器
    face_record = None
    fingerprint_record = None

    login_register_record = None  # 登录注册判断

    register_record_page = 0  # 注册页记录默认值
    medicine_box_record_page = 3  # 药品页记录默认值
    medicine_box_shelf_life_list = []

    medicate_counter = 1  # 用药序列号计数器

    scrollArea_2_fix_pushbutton_flag = False  # 修改flag
    scrollArea_2_remove_pushbutton_flag = False

    timer_update7_flag = False  # 使用时钟更新page7
    timer_update6_flag = False

    setPage3_flag = False  # 使用时钟更新page3
    dh_counter = 20  # 温湿度计数器2s
    d_value = ""
    h_value = ""
    coma_init_flag: bool = True

    use_medicine_flag = False  # 设置用药, 防止同一时间内多次发送信息
    expire_medicine_flag = False

    fix_medicine_pass_flag = None  # 修改药物信息
    remove_medicine_pass_flag = None

    shut_all_medicine_box_flag = False  # 是否关闭所有药盒

    scan_medicine_message = ""

    prev_date = 0  # 管理界面先前日期, 用于计算修改后的保质期
    # 建立信息表系统
    message_system = ([], [], [], [], [], [])
    manage_system = ([], [], [], [], [], [], [], [], [])

    # 全局消息队列
    text_edit_queue = queue.Queue()

    def __init__(self):  # 连接数据库
        threading.Thread(target=face_rec_model.RefreshFaceDatabases, args=(self.text_edit_queue,)).start()
        try:
            self.db = mysql.connector.connect(
                host=init_config['mysql']['host'],
                user=init_config['mysql']['user'],
                password=init_config['mysql']['password'],
                database=init_config['mysql']['database'],  # 直接在连接时指定数据库
                buffered=True  # 更新数据库缓冲区 可执行
            )
            if self.db.is_connected():
                self.mysql_log = "数据核心已连接"
        except Error as e:
            print("连接失败: ", e)
            self.mysql_log = "数据核心连接失败"
        self.cursor = None
        self.global_timer = QTimer()
        # 设置正则输入限制为数字
        self.regex = "[0-9]*"  # 只允许数字
        try:
            # 初始化串口
            global com_a
            com_a = com.InitPort(init_config['com'][0])
            self.redis_con = redis.Redis(host=init_config['redis']['host'], port=init_config['redis']['port'],
                                         password=init_config['redis']['password'])
            self.redis_con.set('python', '3.8')
            # 启动听线程
            self.audio_flag = threading.Event()
            self.com_b = com.InitPort(init_config["com"][2])
            threading.Thread(target=com.AudioOpen, args=(self.com_b, self.audio_flag)).start()
            QApplication.instance().aboutToQuit.connect(lambda: self.audio_flag.set())
        except serial.SerialException as e:
            print("串口连接失败:", e)

    def tryMysqlConnect(self):
        if self.cursor is None:
            self.cursor = self.db.cursor()
        try:
            self.cursor.execute("select 1")
        except Error as e:
            self.db = mysql.connector.connect(
                host=init_config['mysql']['host'],
                user=init_config['mysql']['root'],
                password=init_config['mysql']['password'],
                database=init_config['mysql']['database'],  # 直接在连接时指定数据库
                buffered=True  # 更新数据库缓冲区 可执行
            )
            self.cursor = self.db.cursor()
            # print("连接失败: ", e)
            # self.textEdit.append("数据重连失败")

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setFixedSize(1024, 575)
        Form.setStyleSheet("QWidget#Form\n"
                           "{\n"
                           "    border-image: url(:/windows_img/resource_dir/src_img/bottom_background.png);\n"
                           "}")
        self.pushButton = QtWidgets.QPushButton(parent=Form)
        self.pushButton.setGeometry(QtCore.QRect(0, 33, 100, 100))
        self.pushButton.setStyleSheet("QPushButton{\n"
                                      "    background-image: url(:/windows_img/resource_dir/src_img/register_button.png);\n"
                                      "        background-color: transparent; /* 背景色透明 */\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton:hover{\n"
                                      "    background-image: url(:/windows_img/resource_dir/src_img/register_float.png);\n"
                                      "}")
        self.pushButton.setText("")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_2.setGeometry(QtCore.QRect(0, 133, 100, 100))
        self.pushButton_2.setStyleSheet("QPushButton{\n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/medicine_box_button.png);\n"
                                        "    background-color: transparent; /* 背景色透明 */\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/medicine_box_float.png);\n"
                                        "    \n"
                                        "}\n"
                                        "\n"
                                        "")
        self.pushButton_2.setText("")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_3.setGeometry(QtCore.QRect(0, 233, 100, 100))
        self.pushButton_3.setStyleSheet("QPushButton{\n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/message_button.png);\n"
                                        "    background-color: transparent; /* 背景色透明 */\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/message_float.png);\n"
                                        "    \n"
                                        "}")
        self.pushButton_3.setText("")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_4.setGeometry(QtCore.QRect(0, 333, 100, 100))
        self.pushButton_4.setStyleSheet("QPushButton{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/manage_button.png);\n"
                                        "    background-color: transparent; /* 背景色透明 */\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/manage_float.png);\n"
                                        "    \n"
                                        "}")
        self.pushButton_4.setText("")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_5.setGeometry(QtCore.QRect(0, 433, 100, 100))
        self.pushButton_5.setStyleSheet("QPushButton{\n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/setting_button.png);\n"
                                        "        background-color: transparent; /* 背景色透明 */\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/setting_float.png);\n"
                                        "    \n"
                                        "}")
        self.pushButton_5.setText("")
        self.pushButton_5.setObjectName("pushButton_5")
        self.stackedWidget = QtWidgets.QStackedWidget(parent=Form)
        self.stackedWidget.setGeometry(QtCore.QRect(99, 33, 767, 495))
        self.stackedWidget.setStyleSheet("QWidget#page_4\n"
                                         "{\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/background_img.png);\n"
                                         "}")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setStyleSheet("QWidget#page\n"
                                "{\n"
                                "    background-image: url(:/windows_img/resource_dir/src_img/background_img.png);\n"
                                "}")
        self.page.setObjectName("page")
        self.label = QtWidgets.QLabel(parent=self.page)
        self.label.setGeometry(QtCore.QRect(180, 102, 101, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(30)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel{\n"
                                 "    color: #cdcdcd;\n"
                                 "}")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.page)
        self.label_2.setGeometry(QtCore.QRect(180, 170, 101, 81))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(30)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("QLabel{\n"
                                   "    color: #cdcdcd;\n"
                                   "}")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(parent=self.page)
        self.label_3.setGeometry(QtCore.QRect(180, 250, 101, 81))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(30)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("QLabel{\n"
                                   "    color: #cdcdcd;\n"
                                   "}")
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.page)
        self.lineEdit.setGeometry(QtCore.QRect(285, 191, 267, 47))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(22)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("QLineEdit{\n"
                                    "        background-color: transparent; /* 背景色透明 */\n"
                                    "        border: none;\n"
                                    "    background-image: url(:/windows_img/resource_dir/src_img/telephone_frame.png);\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.page)
        self.lineEdit_2.setGeometry(QtCore.QRect(285, 118, 267, 47))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(22)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("QLineEdit{\n"
                                      "        background-color: transparent; /* 背景色透明 */\n"
                                      "        border: none;\n"
                                      "    background-image: url(:/windows_img/resource_dir/src_img/name_frame.png);\n"
                                      "    color: #cdcdcd;\n"
                                      "}")
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton_9 = QtWidgets.QPushButton(parent=self.page)
        self.pushButton_9.setGeometry(QtCore.QRect(300, 273, 72, 39))
        self.pushButton_9.setStyleSheet("QPushButton{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/Mr_button.png);\n"
                                        "    background-color: transparent; /* 背景色透明 */\n"
                                        "}")
        self.pushButton_9.setText("")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(parent=self.page)
        self.pushButton_10.setGeometry(QtCore.QRect(414, 265, 128, 52))
        self.pushButton_10.setStyleSheet("QPushButton{\n"
                                         "    \n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/stack_register_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/stack_register_clicked.png);\n"
                                         "}")
        self.pushButton_10.setText("")
        self.pushButton_10.setObjectName("pushButton_10")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setStyleSheet("background-image: url(:/windows_img/resource_dir/src_img/background_img.png);")
        self.page_2.setObjectName("page_2")
        self.label_4 = QtWidgets.QLabel(parent=self.page_2)
        self.label_4.setGeometry(QtCore.QRect(60, 30, 324, 244))
        self.label_4.setStyleSheet("QLabel{\n"
                                   "    \n"
                                   "    background-image: url(:/windows_img/resource_dir/src_img/face_rec_icon.png);\n"
                                   "}")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.page_2)
        self.label_5.setGeometry(QtCore.QRect(470, 30, 244, 244))
        self.label_5.setStyleSheet("QLabel{\n"
                                   "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_rec_icon.png);\n"
                                   "}")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.pushButton_11 = QtWidgets.QPushButton(parent=self.page_2)
        self.pushButton_11.setGeometry(QtCore.QRect(60, 310, 142, 70))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(35)
        font.setBold(False)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_float.png);\n"
                                         "    \n"
                                         "}")
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_12 = QtWidgets.QPushButton(parent=self.page_2)
        self.pushButton_12.setGeometry(QtCore.QRect(240, 310, 142, 70))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(35)
        font.setBold(False)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_float.png);\n"
                                         "    \n"
                                         "}")
        self.pushButton_12.setObjectName("pushButton_12")
        self.label_6 = QtWidgets.QLabel(parent=self.page_2)
        self.label_6.setGeometry(QtCore.QRect(250, 280, 131, 31))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("QLabel{\n"
                                   "        background-color: transparent; /* 背景色透明 */\n"
                                   "        border: none;\n"
                                   "    color: #cdcdcd;\n"
                                   "}")
        self.label_6.setObjectName("label_6")
        self.pushButton_13 = QtWidgets.QPushButton(parent=self.page_2)
        self.pushButton_13.setGeometry(QtCore.QRect(470, 320, 107, 55))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(27)
        font.setBold(False)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_float.png);\n"
                                         "}")
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_14 = QtWidgets.QPushButton(parent=self.page_2)
        self.pushButton_14.setGeometry(QtCore.QRect(600, 320, 107, 55))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(27)
        font.setBold(False)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_float.png);\n"
                                         "}")
        self.pushButton_14.setObjectName("pushButton_14")
        self.label_7 = QtWidgets.QLabel(parent=self.page_2)
        self.label_7.setGeometry(QtCore.QRect(604, 290, 101, 31))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("QLabel{\n"
                                   "        background-color: transparent; /* 背景色透明 */\n"
                                   "        border: none;\n"
                                   "    color: #cdcdcd;\n"
                                   "}")
        self.label_7.setObjectName("label_7")
        self.pushButton_15 = QtWidgets.QPushButton(parent=self.page_2)
        self.pushButton_15.setGeometry(QtCore.QRect(290, 410, 251, 70))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(35)
        font.setBold(False)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setStyleSheet("QPushButton{\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/next_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/next_button float.png);\n"
                                         "    \n"
                                         "}")
        self.pushButton_15.setText("")
        self.pushButton_15.setObjectName("pushButton_15")
        self.label_72 = QtWidgets.QLabel(parent=self.page_2)
        self.label_72.setGeometry(QtCore.QRect(60, 280, 151, 31))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        self.label_72.setFont(font)
        self.label_72.setStyleSheet("QLabel{\n"
                                    "        background-color: transparent; /* 背景色透明 */\n"
                                    "        border: none;\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_72.setObjectName("label_72")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setStyleSheet("QWidget#page_3\n"
                                  "{\n"
                                  "    background-image: url(:/windows_img/resource_dir/src_img/background_img.png);\n"
                                  "}")
        self.page_3.setObjectName("page_3")
        self.label_8 = QtWidgets.QLabel(parent=self.page_3)
        self.label_8.setGeometry(QtCore.QRect(10, 0, 161, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("QLabel{\n"
                                   "    color: #cdcdcd;\n"
                                   "}")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(parent=self.page_3)
        self.label_9.setGeometry(QtCore.QRect(10, 60, 161, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("QLabel{\n"
                                   "    color: #cdcdcd;\n"
                                   "}")
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(parent=self.page_3)
        self.label_10.setGeometry(QtCore.QRect(10, 120, 201, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(parent=self.page_3)
        self.label_11.setGeometry(QtCore.QRect(20, 180, 161, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_11.setObjectName("label_11")
        self.lineEdit_5 = QtWidgets.QLineEdit(parent=self.page_3)
        self.lineEdit_5.setGeometry(QtCore.QRect(170, 20, 131, 35))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setStyleSheet("QLineEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(parent=self.page_3)
        self.lineEdit_6.setGeometry(QtCore.QRect(170, 80, 131, 35))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        self.lineEdit_6.setFont(font)
        self.lineEdit_6.setStyleSheet("QLineEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_7 = QtWidgets.QLineEdit(parent=self.page_3)
        self.lineEdit_7.setGeometry(QtCore.QRect(220, 140, 81, 35))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        self.lineEdit_7.setFont(font)
        self.lineEdit_7.setStyleSheet("QLineEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_8 = QtWidgets.QLineEdit(parent=self.page_3)
        self.lineEdit_8.setGeometry(QtCore.QRect(170, 200, 131, 35))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        self.lineEdit_8.setFont(font)
        self.lineEdit_8.setStyleSheet("QLineEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.textEdit_2 = QtWidgets.QTextEdit(parent=self.page_3)
        self.textEdit_2.setGeometry(QtCore.QRect(340, 20, 401, 461))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(22)
        self.textEdit_2.setFont(font)
        self.textEdit_2.setStyleSheet("QTextEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}\n"
                                      "QScrollBar:vertical {               /* 垂直滑块样式 */\n"
                                      "                background: #4c4c4c;            /* 滚动条背景颜色 */\n"
                                      "\n"
                                      "}\n"
                                      "QScrollBar::handle:vertical {       /* 滚动条滑块样式 */\n"
                                      "                background: #666666;            /* 滑块颜色 */\n"
                                      "\n"
                                      "            }\n"
                                      "")
        self.textEdit_2.setObjectName("textEdit_2")
        self.pushButton_16 = QtWidgets.QPushButton(parent=self.page_3)
        self.pushButton_16.setGeometry(QtCore.QRect(11, 250, 107, 55))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(27)
        font.setBold(False)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_float.png);\n"
                                         "}")
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_17 = QtWidgets.QPushButton(parent=self.page_3)
        self.pushButton_17.setGeometry(QtCore.QRect(11, 320, 107, 55))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(27)
        font.setBold(False)
        self.pushButton_17.setFont(font)
        self.pushButton_17.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_float.png);\n"
                                         "}")
        self.pushButton_17.setObjectName("pushButton_17")
        self.lineEdit_9 = QtWidgets.QLineEdit(parent=self.page_3)
        self.lineEdit_9.setGeometry(QtCore.QRect(130, 330, 41, 35))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        self.lineEdit_9.setFont(font)
        self.lineEdit_9.setStyleSheet("QLineEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.lineEdit_9.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.label_12 = QtWidgets.QLabel(parent=self.page_3)
        self.label_12.setGeometry(QtCore.QRect(180, 313, 161, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        font.setUnderline(True)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_12.setObjectName("label_12")
        self.pushButton_18 = QtWidgets.QPushButton(parent=self.page_3)
        self.pushButton_18.setGeometry(QtCore.QRect(8, 382, 211, 111))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(27)
        font.setBold(False)
        self.pushButton_18.setFont(font)
        self.pushButton_18.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/save_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "        \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/save_button float.png);\n"
                                         "}")
        self.pushButton_18.setText("")
        self.pushButton_18.setObjectName("pushButton_18")
        self.label_13 = QtWidgets.QLabel(parent=self.page_3)
        self.label_13.setGeometry(QtCore.QRect(130, 245, 131, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        font.setUnderline(True)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_13.setObjectName("label_13")
        self.label_54 = QtWidgets.QLabel(parent=self.page_3)
        self.label_54.setGeometry(QtCore.QRect(220, 404, 131, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setUnderline(True)
        self.label_54.setFont(font)
        self.label_54.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_54.setObjectName("label_54")
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setStyleSheet("QWidget#page_4\n"
                                  "{\n"
                                  "    background-image: url(:/windows_img/resource_dir/src_img/background_img.png);\n"
                                  "}")
        self.page_4.setObjectName("page_4")
        self.label_14 = QtWidgets.QLabel(parent=self.page_4)
        self.label_14.setGeometry(QtCore.QRect(20, -7, 121, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_14.setObjectName("label_14")
        self.textEdit_3 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_3.setGeometry(QtCore.QRect(70, 50, 91, 54))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setBold(True)
        self.textEdit_3.setFont(font)
        self.textEdit_3.setStyleSheet("QTextEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_18 = QtWidgets.QLabel(parent=self.page_4)
        self.label_18.setGeometry(QtCore.QRect(12, 8, 161, 191))
        self.label_18.setStyleSheet("QLabel{\n"
                                    "        border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                    "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                    "}")
        self.label_18.setText("")
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(parent=self.page_4)
        self.label_19.setGeometry(QtCore.QRect(17, 40, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(parent=self.page_4)
        self.label_20.setGeometry(QtCore.QRect(17, 95, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_20.setObjectName("label_20")
        self.textEdit_4 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_4.setGeometry(QtCore.QRect(70, 117, 91, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_4.setFont(font)
        self.textEdit_4.setStyleSheet("QTextEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.textEdit_4.setObjectName("textEdit_4")
        self.label_21 = QtWidgets.QLabel(parent=self.page_4)
        self.label_21.setGeometry(QtCore.QRect(17, 140, 111, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_21.setFont(font)
        self.label_21.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_21.setObjectName("label_21")
        self.textEdit_5 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_5.setGeometry(QtCore.QRect(120, 160, 41, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(12)
        font.setBold(True)
        self.textEdit_5.setFont(font)
        self.textEdit_5.setStyleSheet("QTextEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "    font-size: 18px;"
                                      "}")
        self.textEdit_5.setObjectName("textEdit_5")
        self.label_22 = QtWidgets.QLabel(parent=self.page_4)
        self.label_22.setGeometry(QtCore.QRect(207, 95, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(parent=self.page_4)
        self.label_23.setGeometry(QtCore.QRect(207, 40, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_23.setFont(font)
        self.label_23.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_23.setObjectName("label_23")
        self.textEdit_6 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_6.setGeometry(QtCore.QRect(260, 117, 91, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_6.setFont(font)
        self.textEdit_6.setStyleSheet("QTextEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.textEdit_6.setObjectName("textEdit_6")
        self.textEdit_7 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_7.setGeometry(QtCore.QRect(310, 160, 41, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_7.setFont(font)
        self.textEdit_7.setStyleSheet("QTextEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "    font-size: 18px;"
                                      "}")
        self.textEdit_7.setObjectName("textEdit_7")
        self.textEdit_8 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_8.setGeometry(QtCore.QRect(260, 50, 91, 54))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setBold(True)
        self.textEdit_8.setFont(font)
        self.textEdit_8.setStyleSheet("QTextEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.textEdit_8.setObjectName("textEdit_8")
        self.label_24 = QtWidgets.QLabel(parent=self.page_4)
        self.label_24.setGeometry(QtCore.QRect(207, 140, 111, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_24.setFont(font)
        self.label_24.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(parent=self.page_4)
        self.label_25.setGeometry(QtCore.QRect(202, 8, 161, 191))
        self.label_25.setStyleSheet("QLabel{\n"
                                    "        border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                    "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                    "}")
        self.label_25.setText("")
        self.label_25.setObjectName("label_25")
        self.label_15 = QtWidgets.QLabel(parent=self.page_4)
        self.label_15.setGeometry(QtCore.QRect(210, -7, 121, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_15.setObjectName("label_15")
        self.label_26 = QtWidgets.QLabel(parent=self.page_4)
        self.label_26.setGeometry(QtCore.QRect(397, 95, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(parent=self.page_4)
        self.label_27.setGeometry(QtCore.QRect(397, 40, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_27.setObjectName("label_27")
        self.textEdit_9 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_9.setGeometry(QtCore.QRect(450, 117, 91, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_9.setFont(font)
        self.textEdit_9.setStyleSheet("QTextEdit{\n"
                                      "    color: #bdbdbd;\n"
                                      "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                      "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                      "    background-color: transparent; /* 背景色透明 */\n"
                                      "}")
        self.textEdit_9.setObjectName("textEdit_9")
        self.textEdit_10 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_10.setGeometry(QtCore.QRect(500, 160, 41, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_10.setFont(font)
        self.textEdit_10.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "    font-size: 18px;"
                                       "}")
        self.textEdit_10.setObjectName("textEdit_10")
        self.textEdit_11 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_11.setGeometry(QtCore.QRect(450, 50, 91, 54))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setBold(True)
        self.textEdit_11.setFont(font)
        self.textEdit_11.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_11.setObjectName("textEdit_11")
        self.label_28 = QtWidgets.QLabel(parent=self.page_4)
        self.label_28.setGeometry(QtCore.QRect(397, 140, 111, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_28.setFont(font)
        self.label_28.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_28.setObjectName("label_28")
        self.label_29 = QtWidgets.QLabel(parent=self.page_4)
        self.label_29.setGeometry(QtCore.QRect(392, 8, 161, 191))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("QLabel{\n"
                                    "        border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                    "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                    "}")
        self.label_29.setText("")
        self.label_29.setObjectName("label_29")
        self.label_16 = QtWidgets.QLabel(parent=self.page_4)
        self.label_16.setGeometry(QtCore.QRect(400, -7, 121, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_16.setObjectName("label_16")
        self.label_30 = QtWidgets.QLabel(parent=self.page_4)
        self.label_30.setGeometry(QtCore.QRect(587, 95, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_30.setFont(font)
        self.label_30.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(parent=self.page_4)
        self.label_31.setGeometry(QtCore.QRect(587, 40, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_31.setObjectName("label_31")
        self.textEdit_12 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_12.setGeometry(QtCore.QRect(640, 117, 91, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_12.setFont(font)
        self.textEdit_12.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_12.setObjectName("textEdit_12")
        self.textEdit_13 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_13.setGeometry(QtCore.QRect(690, 160, 41, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_13.setFont(font)
        self.textEdit_13.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "    font-size: 18px;"
                                       "}")
        self.textEdit_13.setObjectName("textEdit_13")
        self.textEdit_14 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_14.setGeometry(QtCore.QRect(640, 50, 91, 54))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setBold(True)
        self.textEdit_14.setFont(font)
        self.textEdit_14.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_14.setObjectName("textEdit_14")
        self.label_32 = QtWidgets.QLabel(parent=self.page_4)
        self.label_32.setGeometry(QtCore.QRect(587, 140, 111, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_32.setFont(font)
        self.label_32.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_32.setObjectName("label_32")
        self.label_33 = QtWidgets.QLabel(parent=self.page_4)
        self.label_33.setGeometry(QtCore.QRect(582, 8, 161, 191))
        self.label_33.setStyleSheet("QLabel{\n"
                                    "        border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                    "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                    "}")
        self.label_33.setText("")
        self.label_33.setObjectName("label_33")
        self.label_17 = QtWidgets.QLabel(parent=self.page_4)
        self.label_17.setGeometry(QtCore.QRect(590, -7, 121, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_17.setObjectName("label_17")
        self.label_34 = QtWidgets.QLabel(parent=self.page_4)
        self.label_34.setGeometry(QtCore.QRect(17, 305, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_34.setFont(font)
        self.label_34.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(parent=self.page_4)
        self.label_35.setGeometry(QtCore.QRect(17, 250, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_35.setFont(font)
        self.label_35.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_35.setObjectName("label_35")
        self.textEdit_15 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_15.setGeometry(QtCore.QRect(70, 327, 91, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_15.setFont(font)
        self.textEdit_15.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_15.setObjectName("textEdit_15")
        self.textEdit_16 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_16.setGeometry(QtCore.QRect(120, 370, 41, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_16.setFont(font)
        self.textEdit_16.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "    font-size: 18px;"
                                       "}")
        self.textEdit_16.setObjectName("textEdit_16")
        self.textEdit_17 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_17.setGeometry(QtCore.QRect(70, 260, 91, 54))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setBold(True)
        self.textEdit_17.setFont(font)
        self.textEdit_17.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_17.setObjectName("textEdit_17")
        self.label_36 = QtWidgets.QLabel(parent=self.page_4)
        self.label_36.setGeometry(QtCore.QRect(17, 350, 111, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_36.setFont(font)
        self.label_36.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_36.setObjectName("label_36")
        self.label_37 = QtWidgets.QLabel(parent=self.page_4)
        self.label_37.setGeometry(QtCore.QRect(12, 218, 161, 191))
        self.label_37.setStyleSheet("QLabel{\n"
                                    "        border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                    "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                    "}")
        self.label_37.setText("")
        self.label_37.setObjectName("label_37")
        self.label_38 = QtWidgets.QLabel(parent=self.page_4)
        self.label_38.setGeometry(QtCore.QRect(20, 203, 121, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_38.setFont(font)
        self.label_38.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_38.setObjectName("label_38")
        self.label_39 = QtWidgets.QLabel(parent=self.page_4)
        self.label_39.setGeometry(QtCore.QRect(207, 305, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_39.setFont(font)
        self.label_39.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_39.setObjectName("label_39")
        self.label_40 = QtWidgets.QLabel(parent=self.page_4)
        self.label_40.setGeometry(QtCore.QRect(207, 250, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_40.setFont(font)
        self.label_40.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_40.setObjectName("label_40")
        self.textEdit_18 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_18.setGeometry(QtCore.QRect(260, 327, 91, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_18.setFont(font)
        self.textEdit_18.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_18.setObjectName("textEdit_18")
        self.textEdit_19 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_19.setGeometry(QtCore.QRect(310, 370, 41, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_19.setFont(font)
        self.textEdit_19.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "    font-size: 18px;"
                                       "}")
        self.textEdit_19.setObjectName("textEdit_19")
        self.textEdit_20 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_20.setGeometry(QtCore.QRect(260, 260, 91, 54))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setBold(True)
        self.textEdit_20.setFont(font)
        self.textEdit_20.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_20.setObjectName("textEdit_20")
        self.label_41 = QtWidgets.QLabel(parent=self.page_4)
        self.label_41.setGeometry(QtCore.QRect(207, 350, 111, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_41.setFont(font)
        self.label_41.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_41.setObjectName("label_41")
        self.label_42 = QtWidgets.QLabel(parent=self.page_4)
        self.label_42.setGeometry(QtCore.QRect(202, 218, 161, 191))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_42.setFont(font)
        self.label_42.setStyleSheet("QLabel{\n"
                                    "        border: 2px solid #cdcdcd;           /* 设置边框样式 */\n"
                                    "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                    "}")
        self.label_42.setText("")
        self.label_42.setObjectName("label_42")
        self.label_43 = QtWidgets.QLabel(parent=self.page_4)
        self.label_43.setGeometry(QtCore.QRect(210, 203, 121, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_43.setFont(font)
        self.label_43.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_43.setObjectName("label_43")
        self.label_44 = QtWidgets.QLabel(parent=self.page_4)
        self.label_44.setGeometry(QtCore.QRect(397, 305, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_44.setFont(font)
        self.label_44.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_44.setObjectName("label_44")
        self.label_45 = QtWidgets.QLabel(parent=self.page_4)
        self.label_45.setGeometry(QtCore.QRect(397, 250, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_45.setFont(font)
        self.label_45.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_45.setObjectName("label_45")
        self.textEdit_21 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_21.setGeometry(QtCore.QRect(450, 327, 91, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_21.setFont(font)
        self.textEdit_21.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_21.setObjectName("textEdit_21")
        self.textEdit_22 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_22.setGeometry(QtCore.QRect(500, 370, 41, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_22.setFont(font)
        self.textEdit_22.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "    font-size: 18px;"
                                       "}")
        self.textEdit_22.setObjectName("textEdit_22")
        self.textEdit_23 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_23.setGeometry(QtCore.QRect(450, 260, 91, 54))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setBold(True)
        self.textEdit_23.setFont(font)
        self.textEdit_23.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_23.setObjectName("textEdit_23")
        self.label_46 = QtWidgets.QLabel(parent=self.page_4)
        self.label_46.setGeometry(QtCore.QRect(397, 350, 111, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_46.setFont(font)
        self.label_46.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_46.setObjectName("label_46")
        self.label_47 = QtWidgets.QLabel(parent=self.page_4)
        self.label_47.setGeometry(QtCore.QRect(392, 218, 161, 191))
        self.label_47.setStyleSheet("QLabel{\n"
                                    "        border: 2px dashed #cdcdcd;           /* 设置边框样式 */\n"
                                    "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                    "}")
        self.label_47.setText("")
        self.label_47.setObjectName("label_47")
        self.label_48 = QtWidgets.QLabel(parent=self.page_4)
        self.label_48.setGeometry(QtCore.QRect(400, 203, 121, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_48.setFont(font)
        self.label_48.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_48.setObjectName("label_48")
        self.label_49 = QtWidgets.QLabel(parent=self.page_4)
        self.label_49.setGeometry(QtCore.QRect(587, 305, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_49.setFont(font)
        self.label_49.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_49.setObjectName("label_49")
        self.label_50 = QtWidgets.QLabel(parent=self.page_4)
        self.label_50.setGeometry(QtCore.QRect(587, 250, 51, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_50.setFont(font)
        self.label_50.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_50.setObjectName("label_50")
        self.textEdit_24 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_24.setGeometry(QtCore.QRect(640, 327, 91, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_24.setFont(font)
        self.textEdit_24.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_24.setObjectName("textEdit_24")
        self.textEdit_25 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_25.setGeometry(QtCore.QRect(690, 370, 41, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_25.setFont(font)
        self.textEdit_25.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "    font-size: 18px;"
                                       "}")
        self.textEdit_25.setObjectName("textEdit_25")
        self.textEdit_26 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_26.setGeometry(QtCore.QRect(640, 260, 91, 54))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setBold(True)
        self.textEdit_26.setFont(font)
        self.textEdit_26.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_26.setObjectName("textEdit_26")
        self.label_51 = QtWidgets.QLabel(parent=self.page_4)
        self.label_51.setGeometry(QtCore.QRect(587, 350, 111, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_51.setFont(font)
        self.label_51.setStyleSheet("QLabel{\n"
                                    "        color: #bdbdbd;\n"
                                    "}")
        self.label_51.setObjectName("label_51")
        self.label_52 = QtWidgets.QLabel(parent=self.page_4)
        self.label_52.setGeometry(QtCore.QRect(582, 218, 161, 191))
        self.label_52.setStyleSheet("QLabel{\n"
                                    "        border: 2px dashed #cdcdcd;           /* 设置边框样式 */\n"
                                    "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                    "}")
        self.label_52.setText("")
        self.label_52.setObjectName("label_52")
        self.label_53 = QtWidgets.QLabel(parent=self.page_4)
        self.label_53.setGeometry(QtCore.QRect(590, 203, 121, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_53.setFont(font)
        self.label_53.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_53.setObjectName("label_53")
        self.pushButton_19 = QtWidgets.QPushButton(parent=self.page_4)
        self.pushButton_19.setGeometry(QtCore.QRect(10, 417, 142, 70))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(35)
        font.setBold(False)
        self.pushButton_19.setFont(font)
        self.pushButton_19.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_float.png);\n"
                                         "    \n"
                                         "}")
        self.pushButton_19.setObjectName("pushButton_19")
        self.page_4_gesture_button = QtWidgets.QPushButton(parent=self.page_4)
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(28)
        font.setBold(False)
        self.page_4_gesture_button.setFont(font)
        self.page_4_gesture_button.setText('手势')
        self.page_4_gesture_button.setGeometry(QtCore.QRect(380, 430, 100, 50))
        # print(f"    background-image: url({main_current_dir}/resource_dir/src_img/gesture_button.png);\n")
        self.page_4_gesture_button.setStyleSheet("QPushButton{\n"
                                                 "    color: #252525;\n"
                                                 f"    background-image: url(./resource_dir/src_img/gesture_button.png);\n"
                                                 "    background-color: transparent; /* 背景色透明 */\n"
                                                 "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                                 "    background-position: center;   /* 图片居中显示 */\n"
                                                 "}\n"
                                                 "QPushButton:hover{\n"
                                                 "    \n"
                                                 f"    background-image: url(./resource_dir/src_img/gesture_float.png);\n"
                                                 "    \n"
                                                 "}")
        self.textEdit_27 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_27.setGeometry(QtCore.QRect(160, 440, 41, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        font.setBold(True)
        self.textEdit_27.setFont(font)
        self.textEdit_27.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_27.setObjectName("textEdit_27")
        self.label_55 = QtWidgets.QLabel(parent=self.page_4)
        self.label_55.setGeometry(QtCore.QRect(210, 420, 171, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_55.setFont(font)
        self.label_55.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_55.setObjectName("label_55")
        self.label_57 = QtWidgets.QLabel(parent=self.page_4)
        self.label_57.setGeometry(QtCore.QRect(530, 426, 121, 30))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        self.label_57.setFont(font)
        self.label_57.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_57.setObjectName("label_57")
        self.textEdit_28 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_28.setReadOnly(True)
        self.textEdit_28.setGeometry(QtCore.QRect(630, 426, 70, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(13)
        font.setBold(True)
        self.textEdit_28.setFont(font)
        self.textEdit_28.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_28.setObjectName("textEdit_28")
        self.label_56 = QtWidgets.QLabel(parent=self.page_4)
        self.label_56.setGeometry(QtCore.QRect(480, 420, 41, 81))
        self.label_56.setStyleSheet("QLabel{\n"
                                    "    \n"
                                    "    background-image: url(:/windows_img/resource_dir/src_img/temperature_icon.png);\n"
                                    "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                    "                background-position: center;   /* 图片居中显示 */\n"
                                    "}")
        self.label_56.setText("")
        self.label_56.setObjectName("label_56")
        self.textEdit_29 = QtWidgets.QTextEdit(parent=self.page_4)
        self.textEdit_29.setGeometry(QtCore.QRect(630, 463, 70, 32))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(13)
        font.setBold(True)
        self.textEdit_29.setFont(font)
        self.textEdit_29.setReadOnly(True)
        self.textEdit_29.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_29.setObjectName("textEdit_29")
        self.label_58 = QtWidgets.QLabel(parent=self.page_4)
        self.label_58.setGeometry(QtCore.QRect(530, 463, 121, 30))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        self.label_58.setFont(font)
        self.label_58.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_58.setObjectName("label_58")
        self.label_59 = QtWidgets.QLabel(parent=self.page_4)
        self.label_59.setGeometry(QtCore.QRect(700, 420, 61, 81))
        self.label_59.setStyleSheet("QLabel{\n"
                                    "    \n"
                                    "    background-image: url(:/windows_img/resource_dir/src_img/humidity_icon.png);\n"
                                    "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                    "                background-position: center;   /* 图片居中显示 */\n"
                                    "}")
        self.label_59.setText("")
        self.label_59.setObjectName("label_59")
        self.label_29.raise_()
        self.label_52.raise_()
        self.label_47.raise_()
        self.label_42.raise_()
        self.label_37.raise_()
        self.label_33.raise_()
        self.label_16.raise_()
        self.label_25.raise_()
        self.label_18.raise_()
        self.label_14.raise_()
        self.textEdit_3.raise_()
        self.label_19.raise_()
        self.label_20.raise_()
        self.textEdit_4.raise_()
        self.label_21.raise_()
        self.textEdit_5.raise_()
        self.label_22.raise_()
        self.label_23.raise_()
        self.textEdit_6.raise_()
        self.textEdit_7.raise_()
        self.textEdit_8.raise_()
        self.label_24.raise_()
        self.label_15.raise_()
        self.label_26.raise_()
        self.label_27.raise_()
        self.textEdit_9.raise_()
        self.textEdit_10.raise_()
        self.textEdit_11.raise_()
        self.label_28.raise_()
        self.label_30.raise_()
        self.label_31.raise_()
        self.textEdit_12.raise_()
        self.textEdit_13.raise_()
        self.textEdit_14.raise_()
        self.label_32.raise_()
        self.label_17.raise_()
        self.label_34.raise_()
        self.label_35.raise_()
        self.textEdit_15.raise_()
        self.textEdit_16.raise_()
        self.textEdit_17.raise_()
        self.label_36.raise_()
        self.label_38.raise_()
        self.label_39.raise_()
        self.label_40.raise_()
        self.textEdit_18.raise_()
        self.textEdit_19.raise_()
        self.textEdit_20.raise_()
        self.label_41.raise_()
        self.label_43.raise_()
        self.label_44.raise_()
        self.label_45.raise_()
        self.textEdit_21.raise_()
        self.textEdit_22.raise_()
        self.textEdit_23.raise_()
        self.label_46.raise_()
        self.label_48.raise_()
        self.label_49.raise_()
        self.label_50.raise_()
        self.textEdit_24.raise_()
        self.textEdit_25.raise_()
        self.textEdit_26.raise_()
        self.label_51.raise_()
        self.label_53.raise_()
        self.pushButton_19.raise_()
        self.textEdit_27.raise_()
        self.label_55.raise_()
        self.label_57.raise_()
        self.textEdit_28.raise_()
        self.label_56.raise_()
        self.textEdit_29.raise_()
        self.label_58.raise_()
        self.label_59.raise_()
        self.stackedWidget.addWidget(self.page_4)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setStyleSheet("QWidget#page_5\n"
                                  "{\n"
                                  "    background-image: url(:/windows_img/resource_dir/src_img/background_img.png);\n"
                                  "}")
        self.page_5.setObjectName("page_5")
        self.label_60 = QtWidgets.QLabel(parent=self.page_5)
        self.label_60.setGeometry(QtCore.QRect(20, 60, 161, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_60.setFont(font)
        self.label_60.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_60.setObjectName("label_60")
        self.textEdit_30 = QtWidgets.QTextEdit(parent=self.page_5)
        self.textEdit_30.setGeometry(QtCore.QRect(170, 80, 211, 37))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(18)
        font.setBold(True)
        self.textEdit_30.setFont(font)
        self.textEdit_30.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_30.setObjectName("textEdit_30")
        self.checkBox = QtWidgets.QCheckBox(parent=self.page_5)
        self.checkBox.setGeometry(QtCore.QRect(390, 74, 381, 51))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(12)
        font.setUnderline(True)
        self.checkBox.setFont(font)
        self.checkBox.setStyleSheet("QCheckBox{\n"
                                    "    color: #cdcdcd;\n"
                                    "}\n"
                                    "QCheckBox::indicator {\n"
                                    "                width: 20px;    /* 设置复选框的宽度 */\n"
                                    "                height: 20px;   /* 设置复选框的高度 */\n"
                                    "}")
        self.checkBox.setObjectName("checkBox")
        self.label_61 = QtWidgets.QLabel(parent=self.page_5)
        self.label_61.setGeometry(QtCore.QRect(20, 120, 161, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_61.setFont(font)
        self.label_61.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_61.setObjectName("label_61")
        self.textEdit_31 = QtWidgets.QTextEdit(parent=self.page_5)
        self.textEdit_31.setGeometry(QtCore.QRect(170, 140, 51, 37))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(18)
        font.setBold(True)
        self.textEdit_31.setFont(font)
        self.textEdit_31.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_31.setObjectName("textEdit_31")
        # self.checkBox_2 = QtWidgets.QCheckBox(parent=self.page_5)
        # self.checkBox_2.setGeometry(QtCore.QRect(240, 135, 201, 51))
        # font = QtGui.QFont()
        # font.setFamily("礼品卉自由落体")
        # font.setPointSize(12)
        # font.setUnderline(True)
        # self.checkBox_2.setFont(font)
        # self.checkBox_2.setStyleSheet("QCheckBox{\n"
        #                               "    color: #cdcdcd;\n"
        #                               "}\n"
        #                               "QCheckBox::indicator {\n"
        #                               "                width: 20px;    /* 设置复选框的宽度 */\n"
        #                               "                height: 20px;   /* 设置复选框的高度 */\n"
        #                               "}")
        # self.checkBox_2.setObjectName("checkBox_2")
        self.label_62 = QtWidgets.QLabel(parent=self.page_5)
        self.label_62.setGeometry(QtCore.QRect(20, 180, 161, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_62.setFont(font)
        self.label_62.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_62.setObjectName("label_62")
        self.textEdit_32 = QtWidgets.QTextEdit(parent=self.page_5)
        self.textEdit_32.setGeometry(QtCore.QRect(170, 197, 71, 37))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(18)
        font.setBold(True)
        self.textEdit_32.setFont(font)
        self.textEdit_32.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_32.setObjectName("textEdit_32")
        self.label_63 = QtWidgets.QLabel(parent=self.page_5)
        self.label_63.setGeometry(QtCore.QRect(250, 195, 41, 41))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_63.setFont(font)
        self.label_63.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_63.setObjectName("label_63")
        self.textEdit_33 = QtWidgets.QTextEdit(parent=self.page_5)
        self.textEdit_33.setGeometry(QtCore.QRect(290, 197, 41, 37))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(18)
        font.setBold(True)
        self.textEdit_33.setFont(font)
        self.textEdit_33.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_33.setObjectName("textEdit_33")
        self.label_64 = QtWidgets.QLabel(parent=self.page_5)
        self.label_64.setGeometry(QtCore.QRect(340, 195, 41, 41))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_64.setFont(font)
        self.label_64.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_64.setObjectName("label_64")
        self.label_65 = QtWidgets.QLabel(parent=self.page_5)
        self.label_65.setGeometry(QtCore.QRect(430, 195, 41, 41))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_65.setFont(font)
        self.label_65.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_65.setObjectName("label_65")
        self.textEdit_34 = QtWidgets.QTextEdit(parent=self.page_5)
        self.textEdit_34.setGeometry(QtCore.QRect(380, 197, 41, 37))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(18)
        font.setBold(True)
        self.textEdit_34.setFont(font)
        self.textEdit_34.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_34.setObjectName("textEdit_34")
        self.label_66 = QtWidgets.QLabel(parent=self.page_5)
        self.label_66.setGeometry(QtCore.QRect(20, 240, 161, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(25)
        self.label_66.setFont(font)
        self.label_66.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_66.setObjectName("label_66")
        self.textEdit_35 = QtWidgets.QTextEdit(parent=self.page_5)
        self.textEdit_35.setGeometry(QtCore.QRect(183, 260, 61, 37))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(18)
        font.setBold(True)
        self.textEdit_35.setFont(font)
        self.textEdit_35.setStyleSheet("QTextEdit{\n"
                                       "    color: #bdbdbd;\n"
                                       "    border: 1px solid #cdcdcd;           /* 设置边框样式 */\n"
                                       "                border-radius: 10px;               /* 设置圆角半径 */\n"
                                       "    background-color: transparent; /* 背景色透明 */\n"
                                       "}")
        self.textEdit_35.setObjectName("textEdit_35")
        self.checkBox_3 = QtWidgets.QCheckBox(parent=self.page_5)
        self.checkBox_3.setGeometry(QtCore.QRect(260, 255, 201, 51))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(12)
        font.setUnderline(True)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setStyleSheet("QCheckBox{\n"
                                      "    color: #cdcdcd;\n"
                                      "}\n"
                                      "QCheckBox::indicator {\n"
                                      "                width: 20px;    /* 设置复选框的宽度 */\n"
                                      "                height: 20px;   /* 设置复选框的高度 */\n"
                                      "}")
        self.checkBox_3.setObjectName("checkBox_3")
        self.label_67 = QtWidgets.QLabel(parent=self.page_5)
        self.label_67.setGeometry(QtCore.QRect(20, 0, 161, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(30)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_67.setFont(font)
        self.label_67.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_67.setObjectName("label_67")
        self.pushButton_20 = QtWidgets.QPushButton(parent=self.page_5)
        self.pushButton_20.setGeometry(QtCore.QRect(20, 320, 142, 70))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(35)
        font.setBold(False)
        self.pushButton_20.setFont(font)
        self.pushButton_20.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_float.png);\n"
                                         "    \n"
                                         "}")
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_21 = QtWidgets.QPushButton(parent=self.page_5)
        self.pushButton_21.setGeometry(QtCore.QRect(20, 410, 142, 70))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(35)
        font.setBold(False)
        self.pushButton_21.setFont(font)
        self.pushButton_21.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_float.png);\n"
                                         "    \n"
                                         "}")
        self.pushButton_21.setObjectName("pushButton_21")
        self.label_68 = QtWidgets.QLabel(parent=self.page_5)
        self.label_68.setGeometry(QtCore.QRect(180, 320, 191, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_68.setFont(font)
        self.label_68.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_68.setObjectName("label_68")
        self.label_69 = QtWidgets.QLabel(parent=self.page_5)
        self.label_69.setGeometry(QtCore.QRect(180, 410, 191, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_69.setFont(font)
        self.label_69.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_69.setObjectName("label_69")
        self.pushButton_22 = QtWidgets.QPushButton(parent=self.page_5)
        self.pushButton_22.setGeometry(QtCore.QRect(400, 320, 142, 70))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(35)
        font.setBold(False)
        self.pushButton_22.setFont(font)
        self.pushButton_22.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_float.png);\n"
                                         "    \n"
                                         "}")
        self.pushButton_22.setObjectName("pushButton_22")
        self.label_70 = QtWidgets.QLabel(parent=self.page_5)
        self.label_70.setGeometry(QtCore.QRect(560, 320, 191, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_70.setFont(font)
        self.label_70.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_70.setObjectName("label_70")
        self.pushButton_23 = QtWidgets.QPushButton(parent=self.page_5)
        self.pushButton_23.setGeometry(QtCore.QRect(400, 420, 142, 70))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(35)
        font.setBold(False)
        self.pushButton_23.setFont(font)
        self.pushButton_23.setStyleSheet("QPushButton{\n"
                                         "    color: #252525;\n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_button.png);\n"
                                         "    background-color: transparent; /* 背景色透明 */\n"
                                         "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                         "                background-position: center;   /* 图片居中显示 */\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    \n"
                                         "    background-image: url(:/windows_img/resource_dir/src_img/face_float.png);\n"
                                         "    \n"
                                         "}")
        self.pushButton_23.setObjectName("pushButton_23")
        self.label_71 = QtWidgets.QLabel(parent=self.page_5)
        self.label_71.setGeometry(QtCore.QRect(560, 410, 191, 71))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_71.setFont(font)
        self.label_71.setStyleSheet("QLabel{\n"
                                    "    color: #cdcdcd;\n"
                                    "}")
        self.label_71.setObjectName("label_71")
        self.stackedWidget.addWidget(self.page_5)
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setStyleSheet("QWidget#page_6\n"
                                  "{\n"
                                  "    background-image: url(:/windows_img/resource_dir/src_img/background_img.png);\n"
                                  "    background-color: transparent;\n"
                                  "}\n"
                                  "")
        self.page_6.setObjectName("page_6")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.page_6)
        self.scrollArea.setGeometry(QtCore.QRect(0, 0, 767, 495))
        self.scrollArea.setStyleSheet("QScrollArea\n"
                                      "{\n"
                                      "    background-color: transparent;\n"
                                      "    border: none;\n}"
                                      "QScrollBar { width: 0px; }")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 767, 495))
        self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(0, 495))
        self.scrollAreaWidgetContents.setMaximumSize(QtCore.QSize(767, 100000))
        self.scrollAreaWidgetContents.setStyleSheet("QWidget#scrollAreaWidgetContents\n"
                                                    "{\n"
                                                    "\n"
                                                    "    background-color: transparent;\n"
                                                    "\n"
                                                    "}")
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.label_73 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_73.setGeometry(QtCore.QRect(590, 340, 171, 161))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_73.setFont(font)
        self.label_73.setStyleSheet("QLabel{\n"
                                    "    \n"
                                    "    background-image: url(:/windows_img/resource_dir/src_img/medicine_comic_1.png);\n"
                                    "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                    "                background-position: center;   /* 图片居中显示 */\n"
                                    "}")
        self.label_73.setText("")
        self.label_73.setObjectName("label_73")
        self.label_74 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_74.setGeometry(QtCore.QRect(10, 10, 341, 81))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_74.setFont(font)
        self.label_74.setStyleSheet("QLabel{\n"
                                    "    \n"
                                    "    background-image: url(:/windows_img/resource_dir/src_img/medicine_icon_2.png);\n"
                                    "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                    "                background-position: center;   /* 图片居中显示 */\n"
                                    "}")
        self.label_74.setText("")
        self.label_74.setObjectName("label_74")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.stackedWidget.addWidget(self.page_6)
        self.page_7 = QtWidgets.QWidget()
        self.page_7.setStyleSheet("QWidget#page_7\n"
                                  "{\n"
                                  "    background-image: url(:/windows_img/resource_dir/src_img/background_img.png);\n"
                                  "    background-color: transparent;\n"
                                  "}")
        self.page_7.setObjectName("page_7")
        self.scrollArea_2 = QtWidgets.QScrollArea(parent=self.page_7)
        self.scrollArea_2.setGeometry(QtCore.QRect(0, 0, 767, 495))
        self.scrollArea_2.setStyleSheet("QScrollArea\n"
                                        "{\n"
                                        "    background-color: transparent;\n"
                                        "    border: none;\n"
                                        "}"
                                        "QScrollBar { width: 0px; }")
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 767, 495))
        self.scrollAreaWidgetContents_2.setMinimumSize(QtCore.QSize(0, 495))
        self.scrollAreaWidgetContents_2.setMaximumSize(QtCore.QSize(767, 100000))
        self.scrollAreaWidgetContents_2.setStyleSheet("QWidget#scrollAreaWidgetContents_2\n"
                                                      "{\n"
                                                      "    background-color: transparent;\n"
                                                      "}"
                                                      "QScrollBar:vertical {"
                                                      "width: 0px; /* 设置宽度 */"
                                                      "}")
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.label_84 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents_2)
        self.label_84.setGeometry(QtCore.QRect(10, 10, 401, 81))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_84.setFont(font)
        self.label_84.setStyleSheet("QLabel{\n"
                                    "    \n"
                                    "    background-image: url(:/windows_img/resource_dir/src_img/identify.png);\n"
                                    "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                    "                background-position: center;   /* 图片居中显示 */\n"
                                    "}")
        self.label_84.setText("")
        self.label_84.setObjectName("label_84")
        self.label_89 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents_2)
        self.label_89.setGeometry(QtCore.QRect(600, 300, 171, 201))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_89.setFont(font)
        self.label_89.setStyleSheet("QLabel{\n"
                                    "    \n"
                                    "    background-image: url(:/windows_img/resource_dir/src_img/37-animation.png);\n"
                                    "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                    "                background-position: center;   /* 图片居中显示 */\n"
                                    "}")
        self.label_89.setText("")
        self.label_89.setObjectName("label_89")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.stackedWidget.addWidget(self.page_7)
        self.page_8 = QtWidgets.QWidget()
        self.page_8.setStyleSheet("QWidget#page_8\n"
                                  "{\n"
                                  "    background-image: url(:/windows_img/resource_dir/src_img/background_img.png);\n"
                                  "}")
        self.page_8.setObjectName("page_8")
        self.label_90 = QtWidgets.QLabel(parent=self.page_8)
        self.label_90.setGeometry(QtCore.QRect(-80, 0, 401, 131))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(16)
        self.label_90.setFont(font)
        self.label_90.setStyleSheet("QLabel{\n"
                                    "    background-image: url(:/windows_img/resource_dir/src_img/setting.png);\n"
                                    "    background-repeat: no-repeat; /* 禁止图片重复填充 */\n"
                                    "                background-position: center;   /* 图片居中显示 */\n"
                                    "}")
        self.label_90.setText("")
        self.label_90.setObjectName("label_90")
        self.stackedWidget.addWidget(self.page_8)
        self.pushButton_6 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_6.setGeometry(QtCore.QRect(970, 0, 53, 34))
        self.pushButton_6.setStyleSheet("QPushButton{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/quit_button.png);\n"
                                        "        background-color: transparent; /* 背景色透明 */\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/quit_float.png);\n"
                                        "    \n"
                                        "}")
        self.pushButton_6.setText("")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_7.setGeometry(QtCore.QRect(917, 0, 54, 34))
        self.pushButton_7.setStyleSheet("QPushButton{\n"
                                        "        \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/scale_button.png);\n"
                                        "        background-color: transparent; /* 背景色透明 */\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/scale_float.png);\n"
                                        "    \n"
                                        "}")
        self.pushButton_7.setText("")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_8.setGeometry(QtCore.QRect(863, 0, 54, 34))
        self.pushButton_8.setStyleSheet("QPushButton{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/hand_up_button.png);\n"
                                        "        background-color: transparent; /* 背景色透明 */\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    \n"
                                        "    background-image: url(:/windows_img/resource_dir/src_img/hand_up_float.png);\n"
                                        "}")
        self.pushButton_8.setText("")
        self.pushButton_8.setObjectName("pushButton_8")
        self.textEdit = QtWidgets.QTextEdit(parent=Form)
        self.textEdit.setGeometry(QtCore.QRect(874, 76, 141, 451))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(15)
        self.textEdit.setFont(font)
        self.textEdit.setStyleSheet("QTextEdit{\n"
                                    "    background-color: rgb(46, 46, 46);\n"
                                    "    font-family: 礼品卉自由落体;\n"
                                    "    color: #c0c0c0;\n"
                                    "    border: none;\n"
                                    "}"
                                    "QScrollBar:vertical {"
                                    "width: 0px; /* 设置宽度 */"
                                    "}")
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("textEdit")
        self.lineEdit_3 = QtWidgets.QLineEdit(parent=Form)
        self.lineEdit_3.setGeometry(QtCore.QRect(100, 536, 771, 35))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(20)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setStyleSheet("QLineEdit{\n"
                                      "        background-color: transparent; /* 背景色透明 */\n"
                                      "        border: none;\n"
                                      "    color: #cdcdcd;\n"
                                      "}")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(parent=Form)
        self.lineEdit_4.setGeometry(QtCore.QRect(871, 533, 201, 41))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(17)
        font.setBold(True)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setStyleSheet("QLineEdit{\n"
                                      "        background-color: transparent; /* 背景色透明 */\n"
                                      "        border: none;\n"
                                      "    color: #cdcdcd;\n"
                                      "}")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_4.setReadOnly(True)
        self.lineEdit_10 = QtWidgets.QLineEdit(parent=Form)
        self.lineEdit_10.setGeometry(QtCore.QRect(233, 2, 161, 31))
        font = QtGui.QFont()
        font.setFamily("礼品卉自由落体")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        self.lineEdit_10.setFont(font)
        self.lineEdit_10.setStyleSheet("QLineEdit{\n"
                                       "        background-color: transparent; /* 背景色透明 */\n"
                                       "        border: none;\n"
                                       "    color: #adadad;\n"
                                       "}")
        self.lineEdit_10.setObjectName("lineEdit_10")

        self.retranslateUi(Form)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)
        # 全部置为只读
        self.textEdit_3.setReadOnly(True)
        self.textEdit_4.setReadOnly(True)
        self.textEdit_5.setReadOnly(True)
        self.textEdit_6.setReadOnly(True)
        self.textEdit_7.setReadOnly(True)
        self.textEdit_8.setReadOnly(True)
        self.textEdit_9.setReadOnly(True)
        self.textEdit_10.setReadOnly(True)
        self.textEdit_11.setReadOnly(True)
        self.textEdit_12.setReadOnly(True)
        self.textEdit_13.setReadOnly(True)
        self.textEdit_14.setReadOnly(True)
        self.textEdit_15.setReadOnly(True)
        self.textEdit_16.setReadOnly(True)
        self.textEdit_17.setReadOnly(True)
        self.textEdit_18.setReadOnly(True)
        self.textEdit_19.setReadOnly(True)
        self.textEdit_20.setReadOnly(True)
        self.textEdit_21.setReadOnly(True)
        self.textEdit_22.setReadOnly(True)
        self.textEdit_23.setReadOnly(True)
        self.textEdit_24.setReadOnly(True)
        self.textEdit_25.setReadOnly(True)
        self.textEdit_26.setReadOnly(True)
        self.lineEdit_10.setReadOnly(True)

        scrollArea_style_sheet = '''QPushButton{
            color: #252525;
            background-image: url(:/windows_img/resource_dir/src_img/face_button.png);
            background-color: transparent; /* 背景色透明 */
            background-repeat: no-repeat; /* 禁止图片重复填充 */
            background-position: center;   /* 图片居中显示 */
            font-size: 40px;
            font-family: 礼品卉自由落体;
        }
        QPushButton:hover{

            background-image: url(:/windows_img/resource_dir/src_img/face_float.png);

        }'''

        # 为scrollArea添加按钮
        self.scrollArea_use_medicine_button = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.scrollArea_use_medicine_button.setStyleSheet(scrollArea_style_sheet)
        self.scrollArea_use_medicine_button.setGeometry(350, 20, 142, 70)
        self.scrollArea_use_medicine_button.setText("服用")
        self.scrollArea_use_medicine_button.clicked.connect(self.takeMedicine)
        self.scrollArea_shut_medicine_button = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.scrollArea_shut_medicine_button.setStyleSheet(scrollArea_style_sheet)
        self.scrollArea_shut_medicine_button.setGeometry(500, 20, 142, 70)
        self.scrollArea_shut_medicine_button.setText("收回")
        self.scrollArea_shut_medicine_button.clicked.connect(self.shutMedicine)
        self.scrollArea_label = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.scrollArea_label.setText("合上防潮")
        self.scrollArea_label.setStyleSheet('''QLabel{
            color: #cdcdcd;
            font-size: 28px;
            font-family: 礼品卉自由落体;
            text-decoration: underline;
        }''')
        self.scrollArea_label.setGeometry(648, 34, 200, 41)

        # 为scrollArea_2添加按钮
        self.scrollArea_2_fix_pushbutton = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents_2)
        self.scrollArea_2_deleter_pushbutton = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents_2)
        self.scrollArea_2_choose_line_edit = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents_2)
        self.scrollArea_2_label = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents_2)

        self.scrollArea_2_label.setStyleSheet('''QLabel{
            color: #cdcdcd;
            font-size: 20px;
            font-family: 礼品卉自由落体;
            text-decoration: underline;
        }''')
        self.scrollArea_2_label.setGeometry(738, 34, 21, 41)
        self.scrollArea_2_choose_line_edit.setStyleSheet('''QLineEdit{
            color: #bdbdbd;
            border: 1px solid #cdcdcd;           /* 设置边框样式 */
            border-radius: 10px;               /* 设置圆角半径 */
            background-color: transparent; /* 背景色透明 */
            font-family: 礼品卉自由落体;
            font-size: 24px;
        }''')
        self.scrollArea_2_label.setText("号")
        self.scrollArea_2_choose_line_edit.setGeometry(693, 40, 41, 31)
        self.scrollArea_2_fix_pushbutton.setStyleSheet(scrollArea_style_sheet)
        self.scrollArea_2_fix_pushbutton.setGeometry(410, 20, 142, 70)
        self.scrollArea_2_fix_pushbutton.setText("修改")
        self.scrollArea_2_deleter_pushbutton.setStyleSheet(scrollArea_style_sheet)
        self.scrollArea_2_deleter_pushbutton.setGeometry(550, 20, 142, 70)
        self.scrollArea_2_deleter_pushbutton.setText("移除")
        # 初始化
        # self.textEdit.append("系统初始化中...")
        # 为注册页1增加登录按钮
        self.page_label = QtWidgets.QLabel(parent=self.page)
        self.page_label.setText("登录无需填写信息")
        self.page_label.setStyleSheet('''QLabel{
            color: #cdcdcd;
            font-size: 20px;
            font-family: 礼品卉自由落体;
            text-decoration: underline;
        }''')
        self.page_label.setGeometry(560, 120, 267, 40)
        self.page_login_button = QtWidgets.QPushButton(parent=self.page)
        self.page_login_button.setStyleSheet('''QPushButton{
            color: #252525;
            background-image: url(./resource_dir/src_img/login_button.png);
            background-color: transparent; /* 背景色透明 */
            background-repeat: no-repeat; /* 禁止图片重复填充 */
                        background-position: center;   /* 图片居中显示 */
        }
        QPushButton:hover{
            background-image: url(./resource_dir/src_img/login_float.png);
        }''')
        self.page_login_button.setGeometry(290, 330, 250, 75)
        # 全局最精细的时钟信号
        self.global_timer.timeout.connect(self.onTimeout)
        self.global_timer.start(100)
        # 开机更新所有数据库
        # self.medicineExpire()  # !!!!!
        self.updatePage4()
        self.medicineExpire()
        self.updatePage6()
        self.updatePage7()
        # 药箱药物名不可修改
        self.textEdit_30.setReadOnly(True)

        # 消息栏一变化就滑动到最底下
        self.textEdit.textChanged.connect(
            lambda: self.textEdit.verticalScrollBar().setValue(self.textEdit.verticalScrollBar().maximum()))
        # 页面切换链接
        self.stackedWidget.setCurrentIndex(3)  # 设置默认页面
        self.pushButton.clicked.connect(lambda _, index=0: self.showPage(index))  # 切换注册1
        self.pushButton_2.clicked.connect(lambda _, index=3: self.showPage(index))  # 切换药箱1
        self.pushButton_3.clicked.connect(lambda _, index=5: self.showPage(index))  # 切换信息1
        self.pushButton_4.clicked.connect(lambda _, index=6: self.showPage(index))  # 切换管理1
        self.pushButton_5.clicked.connect(lambda _, index=7: self.showPage(index))  # 切换设置1
        # 性别更改信号
        self.pushButton_9.clicked.connect(self.changeSex)
        # 注册页1->2变换信号
        self.pushButton_10.clicked.connect(self.showPage2)
        # 登录按钮page1->2信号
        self.page_login_button.clicked.connect(self.showPage2Login)
        # 跳过图片更替信号
        self.pushButton_12.clicked.connect(self.jumpToFace)
        self.pushButton_14.clicked.connect(self.jumpToFingerprint)
        # 打开人脸识别摄像头信号
        self.pushButton_11.clicked.connect(self.openFaceTest)
        # 打开指纹识别信号
        self.pushButton_13.clicked.connect(lambda: threading.Thread(target=self.openFingerprint).start())
        # 注册页2->3变换信号
        self.pushButton_15.clicked.connect(lambda: threading.Thread(target=self.showPage3).start())
        # 添加删除用药信息
        self.pushButton_16.clicked.connect(self.addMedicateMessage)
        self.pushButton_17.clicked.connect(self.delMedicateMessage)
        # 保存用药信息
        self.pushButton_18.clicked.connect(self.saveMedicateMessage)
        # 药箱页面1->2信号
        self.pushButton_19.clicked.connect(self.showPage5)
        # 药物注册名称改变信号
        self.checkBox.clicked.connect(self.changeRegisterBox)
        # 打钩换算信号
        self.checkBox_3.clicked.connect(self.changeMonthDay)
        # 取消药物设置信号
        self.pushButton_22.clicked.connect(self.cancelSetMedicineBox)
        # 药物识别扫描操作
        # self.pushButton_20.clicked.connect(lambda: threading.Thread(target=self.scanRecognizeMedicine).start())
        self.pushButton_20.clicked.connect(self.scanRecognizeMedicine)
        # 注册新药物信号
        # self.pushButton_21.clicked.connect(lambda: threading.Thread(target=self.fistRegisterMedicine).start())
        self.pushButton_21.clicked.connect(self.fistRegisterMedicine)
        # 更新药物盒子信息
        self.pushButton_23.clicked.connect(self.updateMedicineBox)
        # 更新管理修改操作
        # self.scrollArea_2_fix_pushbutton.clicked.connect(self.page7FixControl)
        self.scrollArea_2_fix_pushbutton.clicked.connect(self.chooseFaceOrFingerprint)
        # 移除操作信号
        # self.scrollArea_2_deleter_pushbutton.clicked.connect(self.page7RemoveControl)
        self.scrollArea_2_deleter_pushbutton.clicked.connect(self.removeMedicineMessage)
        # 手势触发信号
        self.page_4_gesture_button.clicked.connect(self.gestureOpenMedicineBox)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "邮箱:"))
        self.label_2.setText(_translate("Form", "姓名:"))
        self.label_3.setText(_translate("Form", "性别:"))
        self.pushButton_11.setText(_translate("Form", "认证"))
        self.pushButton_12.setText(_translate("Form", "跳过"))
        self.label_6.setText(_translate("Form", "有障碍?点这里"))
        self.pushButton_13.setText(_translate("Form", "认证"))
        self.pushButton_14.setText(_translate("Form", "跳过"))
        self.label_7.setText(_translate("Form", "有障碍?点这里"))
        self.label_72.setText(_translate("Form", "不清晰?点击重拍"))
        self.label_8.setText(_translate("Form", "药品序号:"))
        self.label_9.setText(_translate("Form", "一日几次:"))
        self.label_10.setText(_translate("Form", "一次几粒(包):"))
        self.label_11.setText(_translate("Form", "疗程(天):"))
        self.lineEdit_5.setText(_translate("Form", "牛黄解毒片"))
        self.lineEdit_6.setText(_translate("Form", "3"))
        self.lineEdit_7.setText(_translate("Form", "3"))
        self.lineEdit_8.setText(_translate("Form", "15"))
        self.textEdit_2.setHtml(_translate("Form",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "hr { height: 1px; border-width: 0; }\n"
                                           "li.unchecked::marker { content: \"\\2610\"; }\n"
                                           "li.checked::marker { content: \"\\2612\"; }\n"
                                           "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:22pt; font-weight:400; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"></p></body></html>"))
        self.pushButton_16.setText(_translate("Form", "添加"))
        self.pushButton_17.setText(_translate("Form", "删除"))
        self.lineEdit_9.setText(_translate("Form", "12"))
        self.label_12.setText(_translate("Form", "填写<>中的序号"))
        self.label_13.setText(_translate("Form", "增加用药选项"))
        self.label_54.setText(_translate("Form", "确认用药情况"))
        self.label_14.setText(_translate("Form", "1号药盒"))
        self.textEdit_3.setHtml(_translate("Form",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "hr { height: 1px; border-width: 0; }\n"
                                           "li.unchecked::marker { content: \"\\2610\"; }\n"
                                           "li.checked::marker { content: \"\\2612\"; }\n"
                                           "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:14pt; font-weight:700; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">板蓝根</p></body></html>"))
        self.label_19.setText(_translate("Form", "药品:"))
        self.label_20.setText(_translate("Form", "余量:"))
        self.textEdit_4.setHtml(_translate("Form",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "hr { height: 1px; border-width: 0; }\n"
                                           "li.unchecked::marker { content: \"\\2610\"; }\n"
                                           "li.checked::marker { content: \"\\2612\"; }\n"
                                           "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">100</p></body></html>"))
        self.label_21.setText(_translate("Form", "保质期/天:"))
        self.textEdit_5.setHtml(_translate("Form",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "hr { height: 1px; border-width: 0; }\n"
                                           "li.unchecked::marker { content: \"\\2610\"; }\n"
                                           "li.checked::marker { content: \"\\2612\"; }\n"
                                           "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.label_22.setText(_translate("Form", "余量:"))
        self.label_23.setText(_translate("Form", "药品:"))
        self.textEdit_6.setHtml(_translate("Form",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "hr { height: 1px; border-width: 0; }\n"
                                           "li.unchecked::marker { content: \"\\2610\"; }\n"
                                           "li.checked::marker { content: \"\\2612\"; }\n"
                                           "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_7.setHtml(_translate("Form",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "hr { height: 1px; border-width: 0; }\n"
                                           "li.unchecked::marker { content: \"\\2610\"; }\n"
                                           "li.checked::marker { content: \"\\2612\"; }\n"
                                           "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_8.setHtml(_translate("Form",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "hr { height: 1px; border-width: 0; }\n"
                                           "li.unchecked::marker { content: \"\\2610\"; }\n"
                                           "li.checked::marker { content: \"\\2612\"; }\n"
                                           "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:14pt; font-weight:700; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">阿司匹林</p></body></html>"))
        self.label_24.setText(_translate("Form", "保质期/天:"))
        self.label_15.setText(_translate("Form", "2号药盒"))
        self.label_26.setText(_translate("Form", "余量:"))
        self.label_27.setText(_translate("Form", "药品:"))
        self.textEdit_9.setHtml(_translate("Form",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "hr { height: 1px; border-width: 0; }\n"
                                           "li.unchecked::marker { content: \"\\2610\"; }\n"
                                           "li.checked::marker { content: \"\\2612\"; }\n"
                                           "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                           "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_10.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_11.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:14pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">维生素E</p></body></html>"))
        self.label_28.setText(_translate("Form", "保质期/天:"))
        self.label_16.setText(_translate("Form", "3号药盒"))
        self.label_30.setText(_translate("Form", "余量:"))
        self.label_31.setText(_translate("Form", "药品:"))
        self.textEdit_12.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_13.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_14.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:14pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">对乙酰胺基酚</p></body></html>"))
        self.label_32.setText(_translate("Form", "保质期/天:"))
        self.label_17.setText(_translate("Form", "4号药盒"))
        self.label_34.setText(_translate("Form", "余量:"))
        self.label_35.setText(_translate("Form", "药品:"))
        self.textEdit_15.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_16.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_17.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:14pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">左氧氟沙星</p></body></html>"))
        self.label_36.setText(_translate("Form", "保质期/天:"))
        self.label_38.setText(_translate("Form", "5号药盒"))
        self.label_39.setText(_translate("Form", "余量:"))
        self.label_40.setText(_translate("Form", "药品:"))
        self.textEdit_18.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_19.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">100</span></p></body></html>"))
        self.textEdit_20.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:14pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">布洛芬</p></body></html>"))
        self.label_41.setText(_translate("Form", "保质期/天:"))
        self.label_43.setText(_translate("Form", "6号药盒"))
        self.label_44.setText(_translate("Form", "余量:"))
        self.label_45.setText(_translate("Form", "药品:"))
        self.textEdit_21.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">0</span></p></body></html>"))
        self.textEdit_22.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">0</span></p></body></html>"))
        self.textEdit_23.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:14pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">无</p></body></html>"))
        self.label_46.setText(_translate("Form", "保质期/天:"))
        self.label_48.setText(_translate("Form", "7号药盒"))
        self.label_49.setText(_translate("Form", "余量:"))
        self.label_50.setText(_translate("Form", "药品:"))
        self.textEdit_24.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0</p></body></html>"))
        self.textEdit_25.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0</p></body></html>"))
        self.textEdit_26.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:14pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">无</p></body></html>"))
        self.label_51.setText(_translate("Form", "保质期/天:"))
        self.label_53.setText(_translate("Form", "8号药盒"))
        self.pushButton_19.setText(_translate("Form", "更新"))
        self.textEdit_27.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:15pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1</p></body></html>"))
        self.label_55.setText(_translate("Form", "号药盒(1-8号)"))
        self.label_57.setText(_translate("Form", "药箱温度:"))
        self.textEdit_28.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:13pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0.00℃</p></body></html>"))
        self.textEdit_29.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:13pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0.00%</p></body></html>"))
        self.label_58.setText(_translate("Form", "药箱湿度:"))
        self.label_60.setText(_translate("Form", "药品名称:"))
        self.textEdit_30.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:18pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">请扫描药品获取</p></body></html>"))
        self.checkBox.setText(_translate("Form", "未找到?打钩输入药品名,手势ok确认拍摄注册"))
        self.label_61.setText(_translate("Form", "药品数量:"))
        self.textEdit_31.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:18pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">20</p></body></html>"))
        # self.checkBox_2.setText(_translate("Form", "若为剂量, 打钩不计入"))
        self.label_62.setText(_translate("Form", "出产日期:"))
        self.textEdit_32.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:18pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2024</p></body></html>"))
        self.label_63.setText(_translate("Form", "年"))
        self.textEdit_33.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:18pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3</p></body></html>"))
        self.label_64.setText(_translate("Form", "月"))
        self.label_65.setText(_translate("Form", "日"))
        self.textEdit_34.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:18pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">7</p></body></html>"))
        self.label_66.setText(_translate("Form", "保质期/天:"))
        self.textEdit_35.setHtml(_translate("Form",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "hr { height: 1px; border-width: 0; }\n"
                                            "li.unchecked::marker { content: \"\\2610\"; }\n"
                                            "li.checked::marker { content: \"\\2612\"; }\n"
                                            "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:18pt; font-weight:700; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">180</p></body></html>"))
        self.checkBox_3.setText(_translate("Form", "打钩换算为月"))
        self.label_67.setText(_translate("Form", "7号药盒"))
        self.pushButton_20.setText(_translate("Form", "扫描"))
        self.pushButton_21.setText(_translate("Form", "注册"))
        self.label_68.setText(_translate("Form", "获取药品名称"))
        self.label_69.setText(_translate("Form", "未找到点此处"))
        self.pushButton_22.setText(_translate("Form", "取消"))
        self.label_70.setText(_translate("Form", "返回药箱界面"))
        self.pushButton_23.setText(_translate("Form", "更新"))
        self.label_71.setText(_translate("Form", "更新药盒信息"))
        self.textEdit.setHtml(_translate("Form",
                                         "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                         "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                         "p, li { white-space: pre-wrap; }\n"
                                         "hr { height: 1px; border-width: 0; }\n"
                                         "li.unchecked::marker { content: \"\\2610\"; }\n"
                                         "li.checked::marker { content: \"\\2612\"; }\n"
                                         "</style></head><body style=\" font-family:\'礼品卉自由落体\'; font-size:14pt; font-weight:400; font-style:normal;\">\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"></p></body></html>"))
        self.lineEdit_3.setText(_translate("Form", "状态栏"))
        current_time = datetime.now().strftime("%Y/%m/%d %H:%M")
        current_time = current_time[2:]
        self.lineEdit_4.setText(_translate("Form", current_time))
        self.lineEdit_10.setText(_translate("Form", "当前页: 药箱"))

    def changeGlobalTime(self):
        self.dh_counter = 200
        dh_value = com.PopQueue(com_a)
        if dh_value != "":
            self.d_value = dh_value[:dh_value.find(' ')]
            self.h_value = dh_value[dh_value.find(' ') + 1:]
            return

    def medicineExpire(self):
        with lock_guard:
            print('expire')
            current_page = self.stackedWidget.currentIndex()
            task_time = datetime.now().strftime("%H:%M")
            current_time = task_time[:2]
            self.tryMysqlConnect()
            check_medicine_message = '''select use_time, take_flag from medicine_record'''
            print(check_medicine_message)
            self.cursor.execute(check_medicine_message, [])
            res_list = self.cursor.fetchall()
            print(res_list)
            for use_res in res_list:
                if use_res[1] is not None:
                    continue
                res_expire_time = use_res[0][use_res[0].find('-') + 1:use_res[0].rfind(':')]
                print(current_time, res_expire_time)
                if int(current_time) >= int(res_expire_time):
                    update_message_cmd = '''update medicine_record set take_flag = 0 where take_flag is null and use_time = %s;'''
                    self.cursor.execute(update_message_cmd, [use_res[0]])
            self.db.commit()
            # self.timer_update6_flag = True
            # self.updatePage6()  # !!!!!
            self.stackedWidget.setCurrentIndex(current_page)

    # def redisExpire(self):
    #     with lock_guard:
    #         if self.expire_medicine_flag:
    #             return
    #         self.expire_medicine_flag = True
    #         key_list = self.redis_con.keys()
    #         task_time = datetime.now().strftime("%H:%M")
    #
    #         for b_key in key_list:
    #             remain_time = self.redis_con.ttl(b_key)
    #             if 0 < remain_time < 10000:  # 过期时间小于30s, 则判定为已过期
    #                 # value: str = self.redis_con.get(key)
    #                 key = b_key.decode('utf-8')
    #                 email = key[:key.find('_')]
    #                 medicine_name = key[key.find('_') + 1:]
    #                 # for index in (4, 5):
    #                 #     for message in self.message_system[index]:  # [[label1, ...], [label2, ...], [label3, ...]] 3药品名称, 4服用情况, 5邮箱
    #                 #         print(message.text())
    #                 # print(len(self.message_system[0]))
    #                 for index in range(0, len(self.message_system[0])):  # 查看一共有多少个用药信息
    #                     # print(index)
    #                     list_time = self.message_system[2][index].text()
    #                     # if list_time[list_time.find(' ')+1:list_time.find(' ')+6] != task_time:
    #                     #     print("list_time: "+list_time[list_time.find(' ')+1:list_time.find(' ')+6])
    #                     #     continue
    #                     list_medicine_name = self.message_system[3][index].text()
    #                     list_email = self.message_system[5][index].text()
    #                     use_status = self.message_system[4][index].text()
    #                     detail_medicine_name = list_medicine_name[:list_medicine_name.find('/')]
    #                     detail_email = list_email[list_email.find(' ') + 1:]
    #                     print(f"list:{detail_medicine_name}_{detail_email}")
    #                     print(f"detail:{medicine_name}_{email}")
    #                     if detail_medicine_name == medicine_name and detail_email == email and use_status == '服用情况: 未确定':
    #                         print('push')
    #                         # medicate_queue.put(self.message_system[4][index])
    #                         # use_medicine_status.put(TextColor.m_expire_time.value)  # 存入用药状态
    #                         self.tryMysqlConnect()
    #                         check_usage_time = '''select usage_times from medicate_condition m join identity_message i
    #                         on m.personal_id = i.personal_id where email = %s;'''
    #                         self.cursor.execute(check_usage_time, [email])
    #                         usage_res = self.cursor.fetchall()
    #                         map_expire_accurate[0].append('已过期')  # 保存为已过期
    #                         map_expire_accurate[1].append(
    #                             f'{email}_{medicine_name}_{task_time[:2]}_{usage_res[0][0]}')  # 邮箱_药名_当前时间(小时)_一天几次
    #                         break
    #         # self.updatePage6()
    #         # self.stackedWidget.setCurrentIndex(3)
    #         self.timer_update6_flag = True
    #         # self.timer_update7_flag = True
    #
    #         # for message in self.message_system:
    #         #     if email == message[5] and medicine_name == message[3]:  # 条件符合推入队列, 抽出线程修改
    #         #         print('push')
    #         #         medicate_queue.put(message[4])
    #         #         break

    def clearMedicineMessage(self):
        self.tryMysqlConnect()
        if self.cursor is None:
            self.cursor = self.db.cursor()
        check_cmd = '''delete from medicate_condition where CURDATE() >= DATE_ADD(registration_date, INTERVAL treatment_duration DAY);'''
        self.cursor.execute(check_cmd)
        self.db.commit()

    def useMedicineSchedule(self, use_time):
        with lock_guard:
            if self.use_medicine_flag:
                return
            self.use_medicine_flag = True
            self.tryMysqlConnect()
            check_cmd = '''select email, medicine_name, dosage from medicate_condition m1 join medicine_box m2 on 
            m1.box_id = m2.box_id join identity_message i1 on i1.personal_id = m1.personal_id where usage_times in (%s, %s);'''
            if use_time == '07:00':
                self.clearMedicineMessage()
                self.cursor.execute(check_cmd, [0, 3])
            elif use_time == '08:00':
                self.cursor.execute(check_cmd, [0, 2])
            elif use_time == '12:00':
                self.cursor.execute(check_cmd, [1, 3])
            elif use_time == "18:00":  # 18:00
                self.cursor.execute(check_cmd, [2, 3])
            elif use_time == test_time:
                self.cursor.execute(check_cmd, [2, 3])
            get_medicine_message = self.cursor.fetchall()
            print(get_medicine_message)
            for use_arr in get_medicine_message:
                SMTP.SMTP_Server(use_arr[0], use_arr[1], use_arr[2])
                self.redis_con.set(f'{use_arr[0]}_{use_arr[1]}', use_arr[2])
                self.redis_con.expire(f'{use_arr[0]}_{use_arr[1]}', 7220)  # 两个小时过期
            self.text_edit_queue.put(f"{use_time}的用药提示已发送")

    def takeMedicine(self):
        dialog_control = self.openFaceFingerDialog()
        dialog_control[0].clicked.connect(
            lambda: (dialog_control[2].close(),
                     # threading.Thread(target=self.takeMedicineDetails, args=(False,)).start()) if 1 else print())
                     self.takeMedicineDetails(False)) if 1 else print("", end=""))
        dialog_control[1].clicked.connect(
            lambda: (dialog_control[2].close(),
                     threading.Thread(target=self.takeMedicineDetails, args=(True, )).start()) if 1 else print("", end=""))
                    # self.takeMedicineDetails(True)
        dialog_control[2].exec()

    def takeMedicineDetails(self, index: bool):
        # self.text_edit_queue.put("take")
        # with lock_guard:
        main_medicine_list = []
        main_email = ""
        # face 需要 finger 需要
        name_email = ""

        if index:  # 指纹
            # manage_serial_id = int(self.scrollArea_2_choose_line_edit.text())-1
            # f_name = self.manage_system[1][manage_serial_id].text()
            # f_email = self.manage_system[2][manage_serial_id].text()
            # name_email = f_name[f_name.find(':')+1:]+'_'+f_email[f_email.find(':')+1:]
            # finger_flag = finger_rec.CheckFingerprint(self.text_edit_queue, f_email[f_email.find(':')+1:])
            # if finger_flag == "":
            #     self.text_edit_queue.put("指纹信息不存在")
            #     return
            user_email = finger_rec.MatchFingerprint(self.text_edit_queue)
            print(user_email)
            self.tryMysqlConnect()
            check_name = f'''select personal_name from identity_message where email = %s'''
            self.cursor.execute(check_name, [user_email])
            user_name = self.cursor.fetchone()[0]
            name_email = user_name + '_' + user_email
            print(name_email)
        if not index:  # 人脸
            name_email = face_rec_model.TestFace()
            # name_email = "fahre_674060542@qq.com"
            self.medicineExpire()
            self.updatePage6()
            if name_email == "":
                self.text_edit_queue.put("人脸信息不存在")
                return



        main_email = name_email[name_email.find('_') + 1:]
        main_name = name_email[:name_email.find('_')]
        print("main_email:", main_email)
        self.tryMysqlConnect()
        check_medicine_list_cmd = '''select medicine_name, personal_sex, usage_times, m1.box_id, medicine_margin, dosage, im.personal_id from medicine_box m1 join medicate_condition m2 on 
        m1.box_id = m2.box_id join identity_message im on im.personal_id = m2.personal_id where email = %s '''
        self.cursor.execute(check_medicine_list_cmd, [main_email])
        main_medicine_list = self.cursor.fetchall()  # [[medicine_name, sex], []]
        # self.medicineExpire()  # 检查过期
        self.text_edit_queue.put("用药记录已刷新")
        if len(main_medicine_list) == 0:
            self.text_edit_queue.put(f"{main_name}用户无用药记录")
            return
        # print(main_medicine_list)
        use_medicine_map = {}
        self.text_edit_queue.put(f"{main_name}{personal_sex_map[main_medicine_list[0][1]]}, 请服用:")
        for single_medicine in main_medicine_list:
            email_medicine = f"{main_email}_{single_medicine[0]}"
            b_medicine_res: bytes = self.redis_con.get(email_medicine)
            if not self.medicine_box_shelf_life_list[single_medicine[3] - 1]:
                self.text_edit_queue.put(f"药物{single_medicine[0]}已经过期, 请更换后服用")
                continue
            if single_medicine[4] < single_medicine[5]:
                self.text_edit_queue.put(f"药物{single_medicine[0]}余量不足, 请及时补充")
                continue
            if b_medicine_res is not None and self.redis_con.ttl(email_medicine) > 30:  # 药品还有效则打开
                medicine_res = b_medicine_res.decode('utf-8')
                use_medicine_map.update({single_medicine[0]: medicine_res})
                self.text_edit_queue.put(f"{single_medicine[0]}一次 {medicine_res} 粒/包\n")
                # 药物数量减少
                update_medicine_cmd = '''update medicine_box set medicine_margin = medicine_margin - %s where medicine_name = %s'''
                self.tryMysqlConnect()
                self.cursor.execute(update_medicine_cmd, [medicine_res, single_medicine[0]])  # 药物减少
                # self.redis_con.delete(email_medicine)  # 删除键
                current_time = datetime.now().strftime("%H:%M")
                current_time = current_time[:2]
                # 返回用药开始时间
                possible_list = []
                time_index = 0
                for _take_time in use_medicine_time:
                    take_time_1 = int(_take_time[:_take_time.find(':')])
                    print("task:", take_time_1, current_time)
                    if take_time_1 <= int(current_time) < take_time_1 + int(init_config['interrupt_time']):
                        possible_list.append(_take_time + "-" + expire_time[time_index])
                    time_index += 1
                # 服用记录更改
                update_medicine_server_cmd = '''update medicine_record set take_flag = 1 where personal_id = %s 
                and box_id = %s and use_time = %s and take_flag = null;'''
                for possible_time in possible_list:
                    self.cursor.execute(update_medicine_server_cmd,
                                        [single_medicine[6], single_medicine[3], possible_time])
                # for index in range(0, len(self.message_system[0])):  # 查看一共有多少个用药信息
                #     # print("...")
                #     list_medicine_name = self.message_system[3][index].text()
                #     list_email = self.message_system[5][index].text()
                #     use_status = self.message_system[4][index].text()
                #     detail_medicine_name = list_medicine_name[:list_medicine_name.find('/')]
                #     detail_email = list_email[list_email.find(' ') + 1:]
                #     if detail_medicine_name == single_medicine[
                #         0] and detail_email == main_email and use_status == '服用情况: 未确定':
                #         # medicate_queue.put(self.message_system[4][index])
                #         # use_medicine_status.put(TextColor.m_take_complete.value)  # 存入用药状态, 已服用状态
                #         # print(detail_medicine_name)
                #         map_expire_accurate[0].append('已服用')  # 保存为已服用
                #         map_expire_accurate[1].append(
                #             f'{email_medicine}_{current_time}_{single_medicine[2]}')  # 邮箱_药名_当前时间(小时)_一天几次
                #         break
        if len(use_medicine_map) == 0:
            # self.updatePage6()
            self.text_edit_queue.put('(该用户未到用药时间)')
            return
        self.text_edit_queue.put(f"len:{use_medicine_map}")
        self.tryMysqlConnect()
        medicine_args = ', '.join(f"'{medicine_1}'" for medicine_1 in use_medicine_map.keys())
        # print(medicine_args)
        check_box_id_cmd = f'''select box_id from medicine_box where medicine_name in ({medicine_args})'''
        # print(check_box_id_cmd)
        self.cursor.execute(check_box_id_cmd)
        box_id_list = self.cursor.fetchall()
        for box_id in box_id_list:
            com.OpenBox(com_a, str(box_id[0]))
        self.updatePage6()
        # self.stackedWidget.setCurrentIndex(3)
        # self.timer_update6_flag = True  # 服用
        self.shut_all_medicine_box_flag = True
        # self.timer_update7_flag = True
        self.db.commit()

    def shutMedicine(self):
        if self.shut_all_medicine_box_flag:
            threading.Thread(target=self.shutAllBox).start()
        else:
            self.text_edit_queue.put("服用后记得关闭药盒")
            # self.updatePage6()

    def shutAllBox(self):
        self.tryMysqlConnect()
        check_box_num_cmd = '''select count(*) from medicine_box'''
        self.cursor.execute(check_box_num_cmd, [])
        medicine_contain = self.cursor.fetchall()
        for index in range(1, medicine_contain[0][0] + 1):
            com.CloseBox(com_a, str(index))  # 关闭所有药盒操作入队
        self.shut_all_medicine_box_flag = False

    # 槽
    # 时钟信号槽
    # 全局最小时间单位  异步等待函数
    def onTimeout(self):
        if self.dh_counter == 0:
            if com_a:
                com.GetDH()
                threading.Thread(target=self.changeGlobalTime).start()
        else:  # 不是线程安全的
            if self.dh_counter == 190:
                self.textEdit_28.setText(f"{self.h_value}℃")
                self.textEdit_29.setText(f"{self.d_value}%")
                if self.coma_init_flag:
                    self.textEdit.append('数据核心已连接')
                    self.coma_init_flag = False

            current_time = datetime.now().strftime("%Y/%m/%d %H:%M")
            current_time = current_time[2:]
            self.lineEdit_4.setText(current_time)

            if self.timer_update7_flag:
                self.updatePage7()
                self.timer_update7_flag = False

            if self.timer_update6_flag:
                self.updatePage6()
                self.timer_update6_flag = False

            if self.setPage3_flag:
                self.stackedWidget.setCurrentIndex(2)
                self.setPage3_flag = False

            if not com.string_queue.empty() and com.string_queue.queue[0] != 'DH':
                com.PopQueue(com_a)  # 消息弹出队列
            if not com.string_queue.empty() and com.string_queue.queue[0] == 'DH':
                threading.Thread(target=self.changeGlobalTime).start()

            if self.dh_counter == 1 or self.dh_counter == 100:
                # print(1)
                # 用药时间
                task_time = datetime.now().strftime("%H:%M")
                if task_time in use_medicine_time and not self.use_medicine_flag:  # 如果刚到用药时间并且没有通知用药
                    threading.Thread(target=self.useMedicineSchedule, args=(task_time,)).start()  # 处理用药任务
                if task_time not in use_medicine_time:
                    self.use_medicine_flag = False  # 跳出用药
                if task_time == "00:00":  # 12点刷新所有信息
                    self.tryMysqlConnect()
                    update_cmd = '''update medicine_record set take_flag = null;'''
                    self.cursor.execute(update_cmd, [])
                    self.db.commit()
                # 过期时间
                if task_time in expire_time and not self.expire_medicine_flag:
                    # print(1)
                    # threading.Thread(target=self.medicineExpire).start()
                    self.medicineExpire()
                if task_time not in expire_time:
                    self.expire_medicine_flag = False  # 跳出用药

            while not medicate_queue.empty():
                use_label = medicate_queue.get()
                label_status = use_medicine_status.get()
                label_style_sheet = '''QLabel{\n
                                            color: #cdcdcd;
                                            font-size: 20px;
                                            font-family: 礼品卉自由落体; }'''.replace('#cdcdcd', label_status)
                if label_status == 'red':
                    use_label.setText("服用情况: 未服用")
                elif label_status == 'green':
                    use_label.setText("服用情况: 已服用")
                use_label.setStyleSheet(label_style_sheet)
                self.updatePage6()
                print("get")

            while not self.text_edit_queue.empty():
                self.textEdit.append(self.text_edit_queue.get())

            if self.scrollArea_2_fix_pushbutton_flag:
                self.scrollArea_2_fix_pushbutton.setText("保存")
            else:
                self.scrollArea_2_fix_pushbutton.setText("修改")

            if self.scan_medicine_message != "":
                self.textEdit_30.setText(self.scan_medicine_message)
                self.scan_medicine_message = ""

        self.dh_counter -= 1  # 计数器更改

    # 页面切换操作
    def showPage(self, index):
        self.stackedWidget.setCurrentIndex(index)  # 切换到指定页面
        if 0 <= index <= 2:
            self.lineEdit_10.setText("当前页: 注册")
            self.stackedWidget.setCurrentIndex(self.register_record_page)
            if self.login_register_record or not self.login_register_record and self.face_record is None and self.fingerprint_record is None:
                # print("page:", self.register_record_page)
                if self.register_record_page != 2:
                    self.register_record_page = 0
                    self.stackedWidget.setCurrentIndex(0)
                    self.login_register_record = None
                    # 还原page2数据
                    self.label_4.setStyleSheet('''QLabel{
                                         background-image: url(:/windows_img/resource_dir/src_img/face_rec_icon.png);
                                         border: 2px solid #cdcdcd;           /* 设置边框样式 */
                                         border-radius: 25px;               /* 设置圆角半径 */
                                        }''')
                    self.label_5.setStyleSheet('''QLabel{
                                         background-image: url(:/windows_img/resource_dir/src_img/fingerprint_rec_icon.png);
                                        }''')
            else:
                self.text_edit_queue.put("清除所有消息以返回首页, 若已经登录点击保存返回")
        elif 3 <= index <= 4:
            self.lineEdit_10.setText("当前页: 药箱")
            self.stackedWidget.setCurrentIndex(self.medicine_box_record_page)
        elif index == 5:
            self.lineEdit_10.setText("当前页: 信息")
        elif index == 6:
            self.lineEdit_10.setText("当前页: 管理")
        elif index == 7:
            self.lineEdit_10.setText("当前页: 设置")

    # 性别切换
    def changeSex(self):
        self.pushButton_9_flag = not self.pushButton_9_flag
        if self.pushButton_9_flag:
            self.pushButton_9.setStyleSheet("QPushButton{\n"
                                            "    \n"
                                            "    background-image: url(:/windows_img/resource_dir/src_img/Mr_button.png);\n"
                                            "    background-color: transparent; /* 背景色透明 */\n"
                                            "}")
        else:
            self.pushButton_9.setStyleSheet("QPushButton{\n"
                                            "    \n"
                                            "    background-image: url(:/windows_img/resource_dir/src_img/Miss_button.png);\n"
                                            "    background-color: transparent; /* 背景色透明 */\n"
                                            "}")

    # 切换至注册页2
    def showPage2(self):
        self.login_register_record = False
        if self.lineEdit.text() != "" and self.lineEdit_2.text() != "":
            if re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', self.lineEdit_2.text()):
                self.tryMysqlConnect()
                check_telephone_number = '''select * from identity_message where email = %s'''
                self.cursor.execute(check_telephone_number, [self.lineEdit_2.text()])
                telephone_exist = self.cursor.fetchone()
                if telephone_exist is None:
                    self.stackedWidget.setCurrentIndex(1)
                    self.register_record_page = 1
                else:
                    self.textEdit.append("\n用户的邮箱号码已经注册")
            else:
                self.text_edit_queue.put("邮箱格式不正确")
        else:
            self.textEdit.append("请输入注册信息")

    # 登录切换page2
    def showPage2Login(self):
        # if self.cursor is None:
        #     self.cursor = self.db.cursor()
        # check_account = '''select * from identity_message where email = %s'''
        # self.cursor.execute(check_account, [self.lineEdit_2.text()])
        # res_account = self.cursor.fetchall()
        # if res_account is None:
        #     self.textEdit.append("\n用户不存在, 请先注册")
        # elif self.lineEdit.text() != "":
        #     self.textEdit.append("\n登录请勿输入姓名")
        # else:
        self.login_register_record = True
        self.stackedWidget.setCurrentIndex(1)
        self.register_record_page = 1
        self.textEdit.append("\n请选择认证方式")
        self.label_4.setStyleSheet("QLabel{\n"
                                   "    \n"
                                   "    background-image: url(./resource_dir/src_img/face_pass.png);\n"
                                   "}")
        # self.face_record = True
        # self.fingerprint_record = True
        self.label_5.setStyleSheet("QLabel{\n"
                                   "    \n"
                                   "    background-image: url(./resource_dir/src_img/fingerprint_pass.png);\n"
                                   "}")

    # 切换至注册页3
    def showPage3(self):
        # print(self.face_record, self.fingerprint_record)
        if not self.face_record and not self.fingerprint_record and not self.login_register_record:
            self.text_edit_queue.put("\n请至少选择一项(有障碍点击跳过)注册方式")
            return
        if self.face_record is not None and self.fingerprint_record is not None:
            if self.lineEdit.text() == "":  # 如果是登录操作
                self.tryMysqlConnect()
                check_identify_message = '''select face_identification, fingerprint_identification, personal_name, personal_sex from
                    identity_message where email = %s;'''
                self.cursor.execute(check_identify_message, [self.lineEdit_2.text()])
                indentify_message = self.cursor.fetchone()
                if self.face_record:
                    self.text_edit_queue.put("\n人脸验证通过")
                else:  # 指纹检测, 人脸检测通过无需检测
                    self.text_edit_queue.put("\n指纹验证通过")
                # print(indentify_message[3])
                if indentify_message[3]:
                    sex = "先生"
                else:
                    sex = "女士"
                all_time = self.lineEdit_4.text()
                date_begin = all_time.find(' ')
                date_end = all_time.find(':')
                time_str = int(all_time[date_begin + 1:date_end])
                if time_str < 12:
                    timer_date = "上午"
                elif time_str < 18:
                    timer_date = "下午"
                else:
                    timer_date = "晚上"
                self.text_edit_queue.put(f"\n{indentify_message[2]}{sex}, {timer_date}好!")
            else:  # 注册操作
                self.text_edit_queue.put("账户注册完成")
                face_path = ""
                if self.face_record:
                    face_path = f"./face_databases/{self.lineEdit.text()}_{self.lineEdit_2.text()}.jpg"
                insert_cmd = """insert into identity_message(personal_name, personal_sex, email,
                                        face_identification, fingerprint_identification)
                                        values(%s, %s, %s, %s, %s);"""
                self.cursor.execute(insert_cmd,
                                    [self.lineEdit.text(), self.pushButton_9_flag, self.lineEdit_2.text(), face_path,
                                     self.fingerprint_record])
                self.db.commit()

                self.tryMysqlConnect()
                check_identify_message = '''select face_identification, fingerprint_identification, personal_name, personal_sex from
                                    identity_message where email = %s;'''
                self.cursor.execute(check_identify_message, [self.lineEdit_2.text()])
                indentify_message = self.cursor.fetchone()
                if indentify_message[3]:
                    sex = "先生"
                else:
                    sex = "女士"
                all_time = self.lineEdit_4.text()
                date_begin = all_time.find(' ')
                date_end = all_time.find(':')
                time_str = int(all_time[date_begin + 1:date_end])
                if time_str < 12:
                    timer_date = "上午"
                elif time_str < 18:
                    timer_date = "下午"
                else:
                    timer_date = "晚上"
                self.text_edit_queue.put(f"\n{indentify_message[2]}{sex}, {timer_date}好!")
            self.register_record_page = 2
            self.setPage3_flag = True
            # self.stackedWidget.setCurrentIndex(2)
        else:
            if self.login_register_record == True:
                self.text_edit_queue.put("\n请选择一种认证方式")
            if self.login_register_record == False:
                self.text_edit_queue.put("\n请至少选择一项(有障碍点击跳过)注册方式")
        # # 数据还原
        # # 删除page1数据
        # self.lineEdit_2.setText("")
        # self.lineEdit.setText("")
        # self.pushButton_9_flag = True
        # self.pushButton_9.setStyleSheet('''QPushButton{
        #              background-image: url(:/windows_img/resource_dir/src_img/Mr_button.png);
        #              background-color: transparent; /* 背景色透明 */
        #             }''')
        # # 还原page2数据
        # self.label_4.setStyleSheet('''QLabel{
        #              background-image: url(:/windows_img/resource_dir/src_img/face_rec_icon.png);
        #              border: 2px solid #cdcdcd;           /* 设置边框样式 */
        #              border-radius: 25px;               /* 设置圆角半径 */
        #             }''')
        # self.label_5.setStyleSheet('''QLabel{
        #              background-image: url(:/windows_img/resource_dir/src_img/fingerprint_rec_icon.png);
        #             }''')
        # self.pushButton_12.setText("跳过")
        # self.pushButton_14.setText("跳过")
        # self.face_record = None
        # self.fingerprint_record = None
        # self.medicate_counter = 1  # 将用药序号还原为1
        # self.login_register_record = None

    # 跳过按键后的人脸和指纹的状态
    def jumpToFace(self):
        if self.login_register_record:
            self.text_edit_queue.put("\n登录只需认证")
            return
        if self.face_record is None:
            self.face_record = False
            self.pushButton_12.setText("取消")
            self.label_4.setStyleSheet("QLabel{\n"
                                       "    \n"
                                       "    background-image: url(./resource_dir/src_img/jump_to_face.png);\n"
                                       "}")

        else:
            self.face_record = None
            self.pushButton_12.setText("跳过")
            self.label_4.setStyleSheet("QLabel{\n"
                                       "    \n"
                                       "    background-image: url(:/windows_img/resource_dir/src_img/face_rec_icon.png);\n"
                                       "}")

    def jumpToFingerprint(self):
        if self.login_register_record:
            self.text_edit_queue.put("\n登录只需认证")
            return
        if self.fingerprint_record is None:
            self.fingerprint_record = False
            self.pushButton_14.setText("取消")
            self.label_5.setStyleSheet("QLabel{\n"
                                       "    background-image: url(./resource_dir/src_img/jump_to_fingerprint.png);\n"
                                       "}")
        else:
            self.fingerprint_record = None
            self.pushButton_14.setText("跳过")
            self.label_5.setStyleSheet("QLabel{\n"
                                       "    background-image: url(:/windows_img/resource_dir/src_img/fingerprint_rec_icon.png);\n"
                                       "}")

    def openFaceFingerDialog(self):
        dialog = QDialog()
        dialog.move(400, 200)
        dialog.setFixedSize(600, 300)
        dialog.setStyleSheet("QDialog{\n"
                             "    background-image: url(./resource_dir/src_img/facefinger_dialog_background.png);\n"
                             "}")
        button_1 = QPushButton("", dialog)
        button_1.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;  /* 去除边框 */
            }
        """)
        button_1.setGeometry(50, 50, 200, 200)
        button_2 = QPushButton("", dialog)
        button_2.setStyleSheet("""
                    QPushButton {
                        background-color: transparent;
                        border: none;  /* 去除边框 */
                    }
                """)
        button_2.setGeometry(350, 50, 200, 200)
        dialog.setWindowTitle("验证方式")
        dialog.setWindowModality(Qt.WindowModality.ApplicationModal)
        # dialog.exec()
        return [button_1, button_2, dialog]

    def chooseFaceOrFingerprint(self):
        list_id = self.scrollArea_2_choose_line_edit.text()
        if not re.match(r'^\d+$', list_id) or list_id == "":
            self.text_edit_queue.put('序号非法')
            return
        list_number = int(self.scrollArea_2_choose_line_edit.text())
        if len(self.manage_system[0]) < list_number or list_number <= 0:
            self.textEdit.append("序列号不存在")
            return
        self.tryMysqlConnect()
        check_identify_message = '''select face_identification, fingerprint_identification from identity_message where email = %s;'''
        visit_message = self.manage_system[1][list_number - 1].text()
        email_message = visit_message[visit_message.find("邮箱:") + 3:]
        self.cursor.execute(check_identify_message, [email_message])
        identification = self.cursor.fetchall()
        if self.scrollArea_2_fix_pushbutton_flag:  # 保存√ 修改×
            # threading.Thread(target=self.page7FixControl).start()
            self.page7FixControl()
            return
        dialog_control = self.openFaceFingerDialog()
        dialog_control[0].clicked.connect(
            lambda: (dialog_control[2].close(), self.chooseFaceOrFingerprintValue(False)) if identification[0][0] != ""
            else (self.textEdit.append('账户没有人脸认证方式')))
        dialog_control[1].clicked.connect(
            lambda: (dialog_control[2].close(), self.chooseFaceOrFingerprintValue(True)) if identification[0][1] else (
                self.textEdit.append('账户没有指纹认证方式')))
        dialog_control[2].exec()

    def chooseFaceOrFingerprintValue(self, index: bool):
        # print(1231)
        self.fix_medicine_pass_flag = index
        # threading.Thread(target=self.page7FixControl).start()
        self.page7FixControl()

    def removeMedicineMessage(self):
        list_id = self.scrollArea_2_choose_line_edit.text()
        if not re.match(r'^\d+$', list_id) or list_id == "":
            self.text_edit_queue.put('序号非法')
            return
        list_number = int(self.scrollArea_2_choose_line_edit.text())
        if len(self.manage_system[0]) < list_number or list_number <= 0:
            self.textEdit.append("序列号不存在")
            return
        self.tryMysqlConnect()
        check_identify_message = '''select face_identification, fingerprint_identification from identity_message where email = %s;'''
        visit_message = self.manage_system[1][list_number - 1].text()
        email_message = visit_message[visit_message.find("邮箱:") + 3:]
        self.cursor.execute(check_identify_message, [email_message])
        identification = self.cursor.fetchall()
        # if self.remove_medicine_pass_flag:
        #     # threading.Thread(target=self.page7RemoveControl).start()
        #     self.page7RemoveControl()
        #     return
        # if not identification[0][0] and not identification[0][1]:  # 两个认证方式都不存在直接修改
        #     threading.Thread(target=self.page7RemoveControl).start()
        #     return
        dialog_control = self.openFaceFingerDialog()
        dialog_control[0].clicked.connect(
            lambda: (dialog_control[2].close(), self.removeMedicineMessageValue(False)) if identification[0][
                                                                                               0] != "" else (
                self.textEdit.append('账户没有人脸认证方式')))
        dialog_control[1].clicked.connect(
            lambda: (dialog_control[2].close(), self.removeMedicineMessageValue(True)) if identification[0][1] else (
                self.textEdit.append('账户没有指纹认证方式')))
        dialog_control[2].exec()

    def removeMedicineMessageValue(self, index: bool):
        self.remove_medicine_pass_flag = index
        # threading.Thread(target=self.page7RemoveControl).start()
        self.page7RemoveControl()

    # 打开人脸识别
    def openFaceTest(self):
        if self.lineEdit_2.text() != "":  # 注册
            result_face = face_rec_model.ShowFace()
            if result_face is None:
                self.textEdit.append('未检测到人脸')
                return
            self.tryMysqlConnect()
            # check_name_cmd = '''select personal_name from identity_message where email = %s;'''
            # self.cursor.execute(check_name_cmd, [self.lineEdit_2.text()])
            # res_face_record = self.cursor.fetchone()
            # if res_face_record is None:  # 注册动作
            personal_name = self.lineEdit.text()
            show_face = cv2.resize(result_face, (result_face.shape[1] // 2, result_face.shape[0] // 2))
            cv2.imencode('.jpg', show_face)[1].tofile(
                f"./face_databases/reduce.jpg")
            cv2.imencode('.jpg', result_face)[1].tofile(
                f"./face_databases/{personal_name}_{self.lineEdit_2.text()}.jpg")
            print(f"{personal_name}_{self.lineEdit_2.text()}_reduce.jpg")
            # 设置 QLabel 自适应图片大小
            self.label_4.setStyleSheet("QLabel{\n"
                                       "    \n"
                                       f"   background-image: url(./face_databases/reduce.jpg);\n"
                                       "	border: 4px solid #cdcdcd;"
                                       "    border-radius: 25px;"
                                       "}")
            self.face_record = True
        else:  # 登录操作
            result_face = face_rec_model.TestFace()
            if result_face == "":
                self.text_edit_queue.put('未检测到人脸或者人脸信息不存在')
                return
            else:
                telephone_num = result_face[result_face.find('_') + 1:]
                self.lineEdit_2.setText(telephone_num)
                self.face_record = True
                self.fingerprint_record = False
                self.showPage3()

    # 打开指纹识别创建
    def openFingerprint(self):
        if self.lineEdit.text() != "":  # 注册操作
            # if self.cursor is None:
            #     self.cursor = self.db.cursor()
            # search_fingerprint_record = '''select fingerprint_identification from identity_message where email = %s'''
            # self.cursor.execute(search_fingerprint_record, [self.lineEdit_2.text()])
            # res_fingerprint = self.cursor.fetchall()
            # if len(res_fingerprint) == 0 or not res_fingerprint[0][0]:
            finger_rec.AddFingerprint(self.text_edit_queue, self.label_5, self.lineEdit_2.text())
            # else:
            #     self.textEdit.append("\n你的指纹已经存在")
            self.text_edit_queue.put("指纹注册完成")
            self.fingerprint_record = True
            # self.face_record = False
        else:  # 登录
            finger_flag = finger_rec.MatchFingerprint(self.text_edit_queue)
            if finger_flag != "":
                self.lineEdit_2.setText(finger_flag)
                self.fingerprint_record = True
                self.face_record = False
                self.showPage3()
            else:
                self.text_edit_queue.put("指纹不存在, 请重试或注册")
        # 显示指纹正确信息

    # page3 添加操作槽(用药信息)
    def addMedicateMessage(self):
        if not re.fullmatch(self.regex, self.lineEdit_6.text()):
            self.textEdit.append("\n日服用次数只可为整数")
        elif not re.fullmatch(self.regex, self.lineEdit_7.text()):
            self.textEdit.append("\n一次剂量只可为整数")
        elif not re.fullmatch(self.regex, self.lineEdit_8.text()):
            self.textEdit.append("\n疗程只可为整数")
        elif self.lineEdit_6.text() == "" or self.lineEdit_7.text() == "" or \
                self.lineEdit_7.text() == "" or self.lineEdit_5.text() == "":
            self.textEdit.append("\n选项不可为空")
        else:
            self.tryMysqlConnect()
            self.cursor.execute("SET AUTOCOMMIT = 0;")  # 关闭自动提交
            # 先查找药物存不存在
            check_medicine_box_message = '''select medicine_name from medicine_box where box_id = %s'''
            self.cursor.execute(check_medicine_box_message, [self.lineEdit_5.text()])
            res_list = self.cursor.fetchone()
            if res_list is None or res_list[0] is None:
                self.textEdit.append("\n序号格式不对或者该序号的药箱为空")
                return
            self.lineEdit_5.setText(res_list[0])
            # 如果药物信息存在, 则查询此主键是否存在
            check_primary_key = '''select * from medicate_condition where personal_id = (select personal_id
             from identity_message where email = %s) and box_id in (select box_id from medicine_box where medicine_name = %s)'''
            self.cursor.execute(check_primary_key, [self.lineEdit_2.text(), self.lineEdit_5.text()])
            # 如果信息存在则提示, 不存在则创建
            if self.cursor.fetchone() is None:
                register_date = datetime.now().date()
                add_medicate_message = '''insert into medicate_condition(personal_id, box_id, usage_times, dosage, registration_date, treatment_duration)
                 values((select personal_id from identity_message where email = %s), (select box_id from medicine_box where medicine_name = %s and medicine_margin > 0 limit 1), %s, %s, %s, %s);'''
                self.cursor.execute(add_medicate_message,
                                    [self.lineEdit_2.text(), self.lineEdit_5.text(), int(self.lineEdit_6.text()),
                                     int(self.lineEdit_7.text()), register_date, int(self.lineEdit_8.text())])
                self.textEdit.append("\n信息添加成功")
            else:
                self.textEdit.append("\n该条用药信息已经存在")
                return
            self.textEdit_2.append(f"<{self.medicate_counter}>{self.lineEdit_5.text()} 一日{self.lineEdit_6.text()}次 "
                                   f"一次{self.lineEdit_7.text()}粒(包) 疗程{self.lineEdit_8.text()}天~\n")
            self.medicate_counter += 1  # 药用序号+1

    # 删除用药信息
    def delMedicateMessage(self):
        # 取出信息表字符串
        text_content = self.textEdit_2.toPlainText()
        str_begin = text_content.find(f"<{self.lineEdit_9.text()}>")
        if str_begin == -1:
            self.textEdit.append("\n指定序号不存在")
            return
        else:
            self.tryMysqlConnect()
            if self.cursor is None:
                self.cursor = self.db.cursor()
            self.cursor.execute("SET AUTOCOMMIT = 0;")  # 关闭自动提交
            medicine_name_begin = text_content.find('>', str_begin) + 1
            medicine_name_end = text_content.find(' ', medicine_name_begin)
            medicine_name = text_content[medicine_name_begin:medicine_name_end]
            delete_cmd = '''delete from medicate_condition where (select personal_id from identity_message 
             where email = %s) and (select box_id from medicine_box where medicine_name = %s) '''
            self.cursor.execute(delete_cmd, [self.lineEdit_2.text(), self.lineEdit_5.text()])
            self.text_edit_queue.put(f"{medicine_name}用药情况被移除")
            str_end = text_content.find('\n', str_begin)
            change_content = text_content[:str_begin] + text_content[str_end + 2:]
            self.textEdit_2.setText(change_content)

    # 保存用药信息
    def saveMedicateMessage(self):
        self.tryMysqlConnect()
        new_len = -1
        # print(self.textEdit_2.toPlainText())
        if self.textEdit_2.toPlainText() != "":
            text_str = self.textEdit_2.toPlainText()
            # print(text_str)
            new_len = text_str.count('<')
        self.db.commit()
        # print(new_len)
        if new_len != -1:  # 说明有新纪录
            check_new_cmd = '''select m.personal_id, box_id, usage_times from medicate_condition m join identity_message
             im on m.personal_id = im.personal_id where email = %s order by condition_id desc;'''
            self.cursor.execute(check_new_cmd, [self.lineEdit_2.text()])
            new_medicine_list = self.cursor.fetchall()
            # new_len = len(new_medicine_list)
            # print("new:", new_len)
            insert_cmd = '''insert into medicine_record(personal_id, box_id, use_time) values(%s, %s, %s)'''
            for medicate_list in new_medicine_list:
                # print(medicate_list)
                # print("new:", new_len)
                if new_len == 0:
                    break
                new_len -= 1
                for index in range(0, medicate_list[2]):
                    # print("id:", medicate_list[0], medicate_list[1])
                    # print("index:", medicate_time[medicate_list[2]][index])
                    self.cursor.execute(insert_cmd, [medicate_list[0], medicate_list[1], medicate_time[medicate_list[2]][index]])
            self.db.commit()
            self.updatePage6()  # 更新用药信息同步page6
        # self.timer_update6_flag = True
        self.timer_update7_flag = True
        self.stackedWidget.setCurrentIndex(2)
        # 归零操作
        # 删除用于展示的reduce图片
        reduce_filename = ""
        if self.face_record:
            reduce_filename = f"./face_databases/reduce.jpg"
        if os.path.exists(reduce_filename):
            os.remove(reduce_filename)
        # 删除page1数据
        self.lineEdit_2.setText("")
        self.lineEdit.setText("")
        self.pushButton_9_flag = True
        self.pushButton_9.setStyleSheet('''QPushButton{
         background-image: url(:/windows_img/resource_dir/src_img/Mr_button.png);
         background-color: transparent; /* 背景色透明 */
        }''')
        # 还原page2数据
        self.label_4.setStyleSheet('''QLabel{
         background-image: url(:/windows_img/resource_dir/src_img/face_rec_icon.png);
         border: 2px solid #cdcdcd;           /* 设置边框样式 */
         border-radius: 25px;               /* 设置圆角半径 */
        }''')
        self.label_5.setStyleSheet('''QLabel{ 
	     background-image: url(:/windows_img/resource_dir/src_img/fingerprint_rec_icon.png);
        }''')
        self.pushButton_12.setText("跳过")
        self.pushButton_14.setText("跳过")
        # 刷新人脸数据库
        if not self.login_register_record:  # 登录不刷新
            face_rec_model.RefreshFaceDatabases(self.text_edit_queue)
        self.face_record = None
        self.fingerprint_record = None
        self.login_register_record = None
        # 删除page3数据
        self.lineEdit_5.setText("")
        self.lineEdit_6.setText("")
        self.lineEdit_7.setText("")
        self.lineEdit_8.setText("")
        self.lineEdit_9.setText("")
        self.textEdit_2.setText("")
        self.medicate_counter = 1
        self.register_record_page = 0  # 清除保存页数信息
        self.stackedWidget.setCurrentIndex(self.register_record_page)  # 自动返回注册首页

    # 切换药箱页面2
    def showPage5(self):
        text_number = int(self.textEdit_27.toPlainText())
        if 1 <= text_number <= 8:
            threading.Thread(target=com.OpenBoxNew, args=(str(text_number), )).start()
            # com.OpenBox(com_a, str(text_number))
            self.textEdit.append("\n药名置空视为清空药盒")
            self.stackedWidget.setCurrentIndex(4)
            self.label_67.setText(f"{text_number}号药盒")
            self.medicine_box_record_page = 4

            self.tryMysqlConnect()
            check_cmd = '''select medicine_name, shelf_life from medicine_box where box_id = %s'''
            self.cursor.execute(check_cmd, [text_number])
            medicine_name = self.cursor.fetchone()
            current_time = datetime.now()
            self.textEdit_30.setText(medicine_name[0])
            self.textEdit_31.setText("")
            self.textEdit_32.setText(str(current_time.year))
            self.textEdit_33.setText(str(current_time.month))
            self.textEdit_34.setText(str(current_time.day))
            self.textEdit_35.setText(str(medicine_name[1]))
        else:
            self.textEdit.append("\n药盒号不存在")

    # 更新药箱界面1
    def updatePage4(self):
        self.medicine_box_shelf_life_list.clear()
        self.tryMysqlConnect()
        if self.cursor is None:
            self.cursor = self.db.cursor()
        check_medicine_box = '''select * from medicine_box'''
        self.cursor.execute(check_medicine_box)
        medicine_list = list(self.cursor.fetchall())
        # print(medicine_list)
        for one_message in medicine_list:
            str_shelf_life = ""  # 保质期
            style_sheet = '''QLabel{
                    border: 2px solid #cdcdcd;           /* 设置边框样式 */
                    border-radius: 10px;               /* 设置圆角半径 */
                }'''
            if one_message[1]:
                # 计算保质期
                current_timestamp = datetime.now().timestamp()
                datetime_convert = datetime.combine(one_message[3], time.min)
                date_timestamp = datetime_convert.timestamp()
                shelf_life = int(one_message[4] - (current_timestamp - date_timestamp) // (24 * 3600))
                str_shelf_life = str(shelf_life)
                if shelf_life < 0:
                    str_shelf_life = "no"
                    self.medicine_box_shelf_life_list.append(False)
                else:
                    self.medicine_box_shelf_life_list.append(True)
            else:
                self.medicine_box_shelf_life_list.append(None)
                style_sheet = '''QLabel{
                                        border: 2px dashed #cdcdcd;           /* 设置边框样式 */
                                        border-radius: 10px;               /* 设置圆角半径 */
                                    }'''
            if one_message[0] == 1:
                self.label_18.setStyleSheet(style_sheet)
                if one_message[1] is None:  # 名字为空则必定是空药盒
                    self.textEdit_3.setText("")
                    self.textEdit_4.setText("")
                    self.textEdit_5.setText("")
                else:
                    self.textEdit_3.setText(one_message[1])
                    self.textEdit_4.setText(str(one_message[2]))
                    self.textEdit_5.setText(str_shelf_life)
            elif one_message[0] == 2:
                self.label_25.setStyleSheet(style_sheet)
                if one_message[1] is None:  # 名字为空则必定是空药盒
                    self.textEdit_8.setText("")
                    self.textEdit_6.setText("")
                    self.textEdit_7.setText("")
                else:
                    self.textEdit_8.setText(one_message[1])
                    self.textEdit_6.setText(str(one_message[2]))
                    self.textEdit_7.setText(str_shelf_life)
            elif one_message[0] == 3:
                self.label_29.setStyleSheet(style_sheet)
                if one_message[1] is None:  # 名字为空则必定是空药盒
                    self.textEdit_11.setText("")
                    self.textEdit_9.setText("")
                    self.textEdit_10.setText("")
                else:
                    self.textEdit_11.setText(one_message[1])
                    self.textEdit_9.setText(str(one_message[2]))
                    self.textEdit_10.setText(str_shelf_life)
            elif one_message[0] == 4:
                self.label_33.setStyleSheet(style_sheet)
                if one_message[1] is None:  # 名字为空则必定是空药盒
                    self.textEdit_14.setText("")
                    self.textEdit_12.setText("")
                    self.textEdit_13.setText("")
                else:
                    self.textEdit_14.setText(one_message[1])
                    self.textEdit_12.setText(str(one_message[2]))
                    self.textEdit_13.setText(str_shelf_life)
            elif one_message[0] == 5:
                self.label_37.setStyleSheet(style_sheet)
                if one_message[1] is None:  # 名字为空则必定是空药盒
                    self.textEdit_17.setText("")
                    self.textEdit_15.setText("")
                    self.textEdit_16.setText("")
                else:
                    self.textEdit_17.setText(one_message[1])
                    self.textEdit_15.setText(str(one_message[2]))
                    self.textEdit_16.setText(str_shelf_life)
            elif one_message[0] == 6:
                self.label_42.setStyleSheet(style_sheet)
                if one_message[1] is None:  # 名字为空则必定是空药盒
                    self.textEdit_20.setText("")
                    self.textEdit_18.setText("")
                    self.textEdit_19.setText("")
                else:
                    self.textEdit_20.setText(one_message[1])
                    self.textEdit_18.setText(str(one_message[2]))
                    self.textEdit_19.setText(str_shelf_life)
            elif one_message[0] == 7:
                self.label_47.setStyleSheet(style_sheet)
                if one_message[1] is None:  # 名字为空则必定是空药盒
                    self.textEdit_23.setText("")
                    self.textEdit_21.setText("")
                    self.textEdit_22.setText("")
                else:
                    self.textEdit_23.setText(one_message[1])
                    self.textEdit_21.setText(str(one_message[2]))
                    self.textEdit_22.setText(str_shelf_life)
            elif one_message[0] == 8:
                self.label_52.setStyleSheet(style_sheet)
                if one_message[1] is None:  # 名字为空则必定是空药盒
                    self.textEdit_26.setText("")
                    self.textEdit_24.setText("")
                    self.textEdit_25.setText("")
                else:
                    self.textEdit_26.setText(one_message[1])
                    self.textEdit_24.setText(str(one_message[2]))
                    self.textEdit_25.setText(str_shelf_life)

    # 温湿度传感器

    # 药箱页面2槽设置
    # 能否更改注册名称槽
    def changeRegisterBox(self):
        if not self.checkBox.isChecked():
            self.textEdit_30.setReadOnly(True)
        else:
            self.textEdit_30.setReadOnly(False)

    # 取消设置药箱槽
    def cancelSetMedicineBox(self):
        self.medicine_box_record_page = 3
        self.stackedWidget.setCurrentIndex(3)
        medicine_box_number = self.textEdit_27.toPlainText()
        threading.Thread(target=com.CloseBox, args=(com_a, medicine_box_number)).start()

    # 设置为月和天
    def changeMonthDay(self):
        if self.checkBox_3.isChecked():
            self.label_66.setText("保质期/月:")
        else:
            self.label_66.setText("保质期/天:")

    # 打ok注册
    def fistRegisterMedicine(self):
        self.textEdit.append("\n手势ok表示确认注册, 手势点赞取消注册, 请尽量将药盒靠近拍完整")
        result_img = gesture_rec.FistRegisterMedicine(self.text_edit_queue)
        if result_img is not None:
            image_path = f"./medicine_databases/{self.textEdit_30.toPlainText()}.jpg"
            cv2.imencode('.jpg', result_img)[1].tofile(image_path)
            absolute_path = os.path.abspath(image_path)
            show_img = cv2.imdecode(np.fromfile(absolute_path, dtype=np.uint8), -1)
            cv2.imshow(f"注册{self.textEdit_30.toPlainText()}药品成功", show_img)
            self.text_edit_queue.put("\n点击右上角叉号关闭展示图, 不满意再次点击注册")
            cv2.waitKey(0)
        else:
            pass

    # 识别药物信息
    def scanRecognizeMedicine(self):
        medicine_name = model.MedicineInference()
        if medicine_name == "":
            self.text_edit_queue.put("\n无法识别, 请先注册")
            return
        else:
            self.scan_medicine_message = medicine_name
            # self.textEdit_30.setText(medicine_name)
            self.text_edit_queue.put("\n药品识别成功")

    # 更新药盒信息
    def updateMedicineBox(self):
        text_judge = self.textEdit_30.toPlainText()  # + self.textEdit_31.toPlainText() + \
        #              self.textEdit_32.toPlainText() + self.textEdit_33.toPlainText() + \
        #              self.textEdit_34.toPlainText() + self.textEdit_35.toPlainText()
        if not re.fullmatch(self.regex, self.textEdit_31.toPlainText()):
            self.textEdit.append("\n药品数量只能写入数字")
        elif not re.fullmatch(self.regex, self.textEdit_32.toPlainText()):
            self.textEdit.append("\n年份只能为整数")
        elif not re.fullmatch(self.regex, self.textEdit_33.toPlainText()):
            self.textEdit.append("\n月份只能为整数")
        elif not re.fullmatch(self.regex, self.textEdit_34.toPlainText()):
            self.textEdit.append("\n日期只能为整数")
        elif not re.fullmatch(self.regex, self.textEdit_35.toPlainText()):
            self.textEdit.append("\n保质期只能为整数")
        elif (self.textEdit_35.toPlainText() == "" or self.textEdit_31.toPlainText() == "" or
              self.textEdit_32.toPlainText() == "" or self.textEdit_33.toPlainText() == "" or
              self.textEdit_34.toPlainText() == "") and text_judge != '':  # or self.textEdit_30.toPlainText() == "") \
            self.textEdit.append("\n选项不允许为空")
        else:  # 执行更新操作
            self.tryMysqlConnect()
            # 查看该药是否被人使用
            check_medicine_use_message = '''select * from medicine_record where box_id = %s;'''
            self.cursor.execute(check_medicine_use_message, [int(self.textEdit_27.toPlainText())])
            fc = self.cursor.fetchall()
            if len(fc) > 0:
                self.text_edit_queue.put("该药物被别的用户使用中, 无法更换")
                return
            # 查找药盒是否有记录
            medicine_box_number = self.textEdit_27.toPlainText()
            check_medicine_box = "select box_id from medicine_box where box_id = %s;"
            self.cursor.execute(check_medicine_box, [medicine_box_number])
            threading.Thread(target=com.CloseBox, args=(com_a, medicine_box_number)).start()
            medicine_exist = self.cursor.fetchone()
            if text_judge == "":  # 计入空药盒
                if not medicine_exist:
                    exe_medicine_box = "insert into medicine_box(box_id, medicine_name, medicine_margin, date_production, shelf_life)" \
                                       "values(%s, %s, %s, %s, %s);"
                    self.cursor.execute(exe_medicine_box,
                                        [int(self.textEdit_27.toPlainText()), None, None, None, None])
                    self.textEdit.append(f"\n{int(self.textEdit_27.toPlainText())}号药盒添加完成")
                else:
                    exe_medicine_box = "update medicine_box set medicine_name = %s," \
                                       " medicine_margin = %s, date_production = %s, shelf_life = %s where box_id = %s;"
                    self.cursor.execute(exe_medicine_box,
                                        [None, None, None, None, int(self.textEdit_27.toPlainText())])
                    self.textEdit.append(f"\n{int(self.textEdit_27.toPlainText())}号药盒更新完成")
                str_shelf = ""
                style_sheet = '''QLabel{
                        border: 2px dashed #cdcdcd;           /* 设置边框样式 */
                        border-radius: 10px;               /* 设置圆角半径 */
                    }'''
            else:
                # 更改数据库
                product_date = f"{self.textEdit_32.toPlainText()}-{self.textEdit_33.toPlainText()}-" \
                               f"{self.textEdit_34.toPlainText()}"
                shelf_day = int(self.textEdit_35.toPlainText())
                if self.checkBox_3.isChecked():
                    shelf_day = shelf_day * 30
                if not medicine_exist:
                    exe_medicine_box = "insert into medicine_box(box_id, medicine_name, medicine_margin, date_production, shelf_life)" \
                                       "values(%s, %s, %s, %s, %s);"
                    self.cursor.execute(exe_medicine_box,
                                        [int(self.textEdit_27.toPlainText()), self.textEdit_30.toPlainText(),
                                         int(self.textEdit_31.toPlainText()), product_date, shelf_day])
                    self.textEdit.append(f"\n{int(self.textEdit_27.toPlainText())}号药盒添加完成")
                else:
                    exe_medicine_box = "update medicine_box set medicine_name = %s," \
                                       " medicine_margin = %s, date_production = %s, shelf_life = %s where box_id = %s;"
                    self.cursor.execute(exe_medicine_box,
                                        [self.textEdit_30.toPlainText(), int(self.textEdit_31.toPlainText()),
                                         product_date, shelf_day, int(self.textEdit_27.toPlainText())])
                    self.textEdit.append(f"\n{int(self.textEdit_27.toPlainText())}号药盒更新完成")
            self.db.commit()
            # 数据保存至药箱首页操作
            self.updatePage4()
            # 归零操作
            self.textEdit_30.setText("")
            self.textEdit_31.setText("")
            self.textEdit_32.setText("")
            self.textEdit_33.setText("")
            self.textEdit_34.setText("")
            self.textEdit_35.setText("")
            self.label_66.setText("保质期/天:")
            self.textEdit_30.setReadOnly(True)
            self.checkBox.setChecked(False)
            self.checkBox_3.setChecked(False)
            self.medicine_box_record_page = 3
            self.stackedWidget.setCurrentIndex(self.medicine_box_record_page)

    # 更新page6信息页面
    def updatePage6(self):
        # with lock_guard:
        # print('entry6')
        # self.medicineExpire() !!!!!
        self.tryMysqlConnect()
        check_medicate_message = '''select personal_name, usage_times, medicine_name, dosage, registration_date, 
            treatment_duration, email from medicate_condition join medicine_box mb on medicate_condition.box_id = mb.box_id 
            join identity_message im on im.personal_id = medicate_condition.personal_id;'''
        self.cursor.execute(check_medicate_message)
        medicate_res = self.cursor.fetchall()
        dynamic_xy = {'x': 380, 'y': 130}
        height_cnt = 0
        weight_flag = False
        increase_flag = False
        label_style_sheet = '''QLabel{\n
                            color: #cdcdcd;\n
                            font-size: 20px;
                            font-family: 礼品卉自由落体; }'''
        # if len(self.message_system[0]) > 0:
        self.stackedWidget.setCurrentIndex(3)
        for widget_list in self.message_system:
            for widget in widget_list:
                widget.deleteLater()
        self.message_system = ([], [], [], [], [], [])
        self.scrollAreaWidgetContents.setMinimumHeight(495)
        self.scrollAreaWidgetContents.setGeometry(0, 0, 767, 495)
        for list_message in medicate_res:
            for usage_time in range(0, list_message[1]):
                if height_cnt > 2 and not weight_flag:
                    self.scrollAreaWidgetContents.setMinimumHeight(self.scrollAreaWidgetContents.height() + 130)
                label_temp_1 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
                label_temp_1.setGeometry(10 + weight_flag * dynamic_xy['x'],
                                         110 + height_cnt * dynamic_xy['y'], 365, 120)
                label_temp_1.setStyleSheet('QLabel{'
                                           'border: 2px solid #cdcdcd;           /* 设置边框样式 */'
                                           'border-radius: 10px;               /* 设置圆角半径 */'
                                           '}')
                label_temp_2 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
                label_temp_2.setGeometry(20 + weight_flag * dynamic_xy['x'], 110 + height_cnt * dynamic_xy['y'], 180,
                                         30)
                label_temp_2.setText(f"用户: {list_message[0]}")
                label_temp_2.setStyleSheet(label_style_sheet)
                label_temp_3 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
                label_temp_3.setGeometry(180 + weight_flag * dynamic_xy['x'], 110 + height_cnt * dynamic_xy['y'], 200,
                                         30)
                label_temp_3.setText(f"用药时间: {medicate_time[list_message[1]][usage_time]}")
                label_temp_3.setStyleSheet(label_style_sheet)
                label_temp_4 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
                label_temp_4.setGeometry(20 + weight_flag * dynamic_xy['x'], 140 + height_cnt * dynamic_xy['y'], 300,
                                         30)
                label_temp_4.setText(f"{list_message[2]}/一次{list_message[3]}粒(包)")
                label_temp_4.setStyleSheet(label_style_sheet)
                # 判断服用情况 # 邮箱_药名_当前时间(小时)_一天几次
                take_condition = "未确定"
                label_style_sheet_2 = '''QLabel{\n
                            color: yellow;\n
                            font-size: 20px;
                            font-family: 礼品卉自由落体; }'''
                # print('entry 6 loop')
                check_usage_cmd = '''select i.email, m1.medicine_name, mr.use_time, mr.take_flag from identity_message i 
                join medicine_record mr on i.personal_id = mr.personal_id join medicine_box m1 on m1.box_id = mr.box_id;'''
                self.cursor.execute(check_usage_cmd, [])
                usage_list = self.cursor.fetchall()
                for usage_it in usage_list:  # 一共几条用药记录
                    # print("use:", usage_it)
                    # print("list", list_message[6], list_message[2], medicate_time[list_message[1]][usage_time])
                    if usage_it[0] == list_message[6] and usage_it[1] == list_message[2] and \
                            usage_it[2] == medicate_time[list_message[1]][usage_time]:
                        if usage_it[3] == 1:
                            label_style_sheet_2 = label_style_sheet_2.replace('yellow', TextColor.m_take_complete.value)
                            take_condition = '已服用'
                        elif usage_it[3] == 0:
                            label_style_sheet_2 = label_style_sheet_2.replace('yellow', TextColor.m_expire_time.value)
                            take_condition = '已过期'
                #
                # for index in range(0, len(map_expire_accurate[0])):
                #     message_arr = map_expire_accurate[1][index]
                #     email = message_arr[:message_arr.find('_')]
                #     medicine = message_arr[message_arr.find('_') + 1:message_arr.find('_', message_arr.find('_') + 1)]
                #     usage_time_1 = message_arr[len(message_arr) - 1]
                #     print(f'<{email}_{medicine}_{usage_time_1}>',
                #           f'<{list_message[6]}_{list_message[2]}_{list_message[1]}>')
                #     # if f'{email}_{medicine}_{usage_time_1}' != f'{list_message[6]}_{list_message[2]}_{list_message[1]}':
                #     if f'{email}_{medicine}' != f'{list_message[6]}_{list_message[2]}':
                #         continue
                #     that_time = message_arr[message_arr.find('_', message_arr.find('_') + 1) + 1:message_arr.rfind('_')]
                #     this_time = label_temp_3.text()[label_temp_3.text().find('-') + 1:label_temp_3.text().find('-') + 3]
                #     print(f'<{map_expire_accurate[0][index]}>')
                #     if map_expire_accurate[0][index] == '已过期':
                #         print(this_time, that_time)
                #         if this_time == that_time:
                #         # if this_time == '14':  # !!!!!
                #             take_condition = map_expire_accurate[0][index]
                #             label_style_sheet_2 = label_style_sheet_2.replace('yellow', TextColor.m_expire_time.value)
                #             print(label_style_sheet_2)
                #             break
                #     if map_expire_accurate[0][index] == '已服用':
                #         if int(this_time) - 2 <= int(that_time) <= int(this_time):  # !!!!!
                #         # if this_time != '':
                #             take_condition = map_expire_accurate[0][index]
                #             label_style_sheet_2 = label_style_sheet_2.replace('yellow', TextColor.m_take_complete.value)
                #             print(label_style_sheet_2)
                #             break

                label_temp_5 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
                label_temp_5.setGeometry(20 + weight_flag * dynamic_xy['x'], 170 + height_cnt * dynamic_xy['y'], 300,
                                         30)
                label_temp_5.setText(f"服用情况: {take_condition}")
                label_temp_5.setStyleSheet(label_style_sheet_2)
                label_temp_6 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
                label_temp_6.setGeometry(20 + weight_flag * dynamic_xy['x'], 200 + height_cnt * dynamic_xy['y'], 300,
                                         30)
                label_temp_6.setText(f"联系邮箱: {list_message[6]}")
                label_temp_6.setStyleSheet(label_style_sheet)
                # print('append')
                self.message_system[0].append(label_temp_1)
                self.message_system[1].append(label_temp_2)
                self.message_system[2].append(label_temp_3)
                self.message_system[3].append(label_temp_4)
                self.message_system[4].append(label_temp_5)
                self.message_system[5].append(label_temp_6)
                if increase_flag:
                    height_cnt += 1
                weight_flag = not weight_flag
                increase_flag = not increase_flag
        # self.scrollAreaWidgetContents.update()
        # print('sql over')  # 卡在for循环里了
        self.stackedWidget.setCurrentIndex(5)

    # 更新管理界面page7
    def updatePage7(self):
        self.tryMysqlConnect()
        if self.cursor is None:
            self.cursor = self.db.cursor()
        check_manage_cmd = '''select i1.personal_name, i1.email, m2.medicine_name, m1.usage_times, m1.dosage, m1.registration_date, m1.treatment_duration
from medicate_condition m1 join medicine_box m2 on m1.box_id = m2.box_id join identity_message i1 on m1.personal_id = i1.personal_id;'''
        self.cursor.execute(check_manage_cmd)
        manage_res = self.cursor.fetchall()
        dynamic_xy = {'x': 380, 'y': 150}
        height_cnt = 0
        list_id = 1
        weight_flag = False
        increase_flag = False
        label_style_sheet = '''QLabel{\n
                                    color: #cdcdcd;\n
                                    font-size: 24px;
                                    font-family: 礼品卉自由落体; }'''
        text_edit_style_sheet = """QLineEdit{
            color: #bdbdbd;
            border: 1px solid #cdcdcd;           /* 设置边框样式 */
                        border-radius: 10px;               /* 设置圆角半径 */
            background-color: transparent; /* 背景色透明 */
            font-size: 22px;
            font-family: 礼品卉自由落体;
         }"""
        if len(self.manage_system[0]) > 0:
            for widget_list in self.manage_system:
                for widget in widget_list:
                    widget.deleteLater()
            self.manage_system = ([], [], [], [], [], [], [], [], [])
            self.scrollAreaWidgetContents_2.setMinimumHeight(495)
            self.scrollAreaWidgetContents_2.setGeometry(0, 0, 767, 495)
        for list_message in manage_res:
            if height_cnt > 1 and not weight_flag:
                self.scrollAreaWidgetContents_2.setMinimumHeight(self.scrollAreaWidgetContents_2.height() + 130)
            # 计算疗程
            current_timestamp = datetime.now().timestamp()
            datetime_convert = datetime.combine(list_message[5], time.min)
            date_timestamp = datetime_convert.timestamp()
            shelf_life = int(list_message[6] - (current_timestamp - date_timestamp) // (24 * 3600))
            if shelf_life <= 0:
                str_shelf_life = "-1"
            else:
                str_shelf_life = str(shelf_life)
            label_temp_1 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents_2)
            label_temp_1.setGeometry(10 + weight_flag * dynamic_xy['x'],
                                     110 + height_cnt * dynamic_xy['y'], 365, 140)
            label_temp_1.setStyleSheet('QLabel{'
                                       'border: 2px solid #cdcdcd;           /* 设置边框样式 */'
                                       'border-radius: 10px;               /* 设置圆角半径 */'
                                       '}')
            label_temp_1.show()
            label_temp_2 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents_2)
            label_temp_2.setGeometry(20 + weight_flag * dynamic_xy['x'], 115 + height_cnt * dynamic_xy['y'], 400, 30)
            label_temp_2.setText(f"用户:{list_message[0]} 邮箱:{list_message[1]}")
            label_temp_2.setStyleSheet('''QLabel{\n
                                    color: #cdcdcd;\n
                                    font-size: 20px;
                                    font-family: 礼品卉自由落体; }''')
            label_temp_2.show()
            label_temp_3 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents_2)
            label_temp_3.setGeometry(20 + weight_flag * dynamic_xy['x'], 145 + height_cnt * dynamic_xy['y'], 400, 30)
            label_temp_3.setText(f"一天    次, 一次    粒(包)")
            label_temp_3.setStyleSheet(label_style_sheet)
            label_temp_3.show()
            text_temp_1 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents_2)
            text_temp_1.setGeometry(73 + weight_flag * dynamic_xy['x'], 147 + height_cnt * dynamic_xy['y'], 40, 27)
            text_temp_1.setText(f"{list_message[3]}")
            text_temp_1.setStyleSheet('''QLabel{\n
                                    color: #cdcdcd;\n
                                    font-size: 25px;
                                    font-family: 礼品卉自由落体; }''')
            text_temp_1.setAlignment(Qt.AlignmentFlag.AlignCenter)
            # text_temp_1.setReadOnly(True)
            text_temp_1.show()
            text_temp_2 = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents_2)
            text_temp_2.setGeometry(210 + weight_flag * dynamic_xy['x'], 147 + height_cnt * dynamic_xy['y'], 40, 27)
            text_temp_2.setText(f"{list_message[4]}")
            text_temp_2.setStyleSheet(text_edit_style_sheet)
            text_temp_2.setReadOnly(True)
            text_temp_2.show()
            label_temp_4 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents_2)
            label_temp_4.setGeometry(20 + weight_flag * dynamic_xy['x'], 180 + height_cnt * dynamic_xy['y'], 400, 30)
            label_temp_4.setText(f"药品:          剩余疗程:    天")
            label_temp_4.setStyleSheet(label_style_sheet)
            label_temp_4.show()
            text_temp_3 = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents_2)
            text_temp_3.setGeometry(80 + weight_flag * dynamic_xy['x'], 180 + height_cnt * dynamic_xy['y'], 110, 30)
            text_temp_3.setText(f"{list_message[2]}")
            text_temp_3.setStyleSheet("""QLineEdit{
                color: #bdbdbd;
                border: 2px solid #888888;           /* 设置边框样式 */
                            border-radius: 5px;               /* 设置圆角半径 */
                background-color: transparent; /* 背景色透明 */
                font-size: 22px;
                font-family: 礼品卉自由落体;
            }""")
            text_temp_3.setReadOnly(True)
            text_temp_3.show()
            text_temp_4 = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents_2)
            text_temp_4.setGeometry(300 + weight_flag * dynamic_xy['x'], 180 + height_cnt * dynamic_xy['y'], 40, 30)
            text_temp_4.setText(f"{str_shelf_life}")
            text_temp_4.setStyleSheet(text_edit_style_sheet)
            text_temp_4.setReadOnly(True)
            text_temp_4.show()
            label_temp_5 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents_2)
            label_temp_5.setGeometry(217 + weight_flag * dynamic_xy['x'], 212 + height_cnt * dynamic_xy['y'], 200, 30)
            label_temp_5.setText(f"序列号: {list_id}")
            label_temp_5.setStyleSheet('''QLabel{\n
                                    color: #cdcdcd;\n
                                    font-size: 24px;
                                    text-decoration: underline;
                                    font-family: 礼品卉自由落体; }''')
            label_temp_5.show()
            self.manage_system[0].append(label_temp_1)
            self.manage_system[1].append(label_temp_2)
            self.manage_system[2].append(label_temp_3)
            self.manage_system[3].append(text_temp_1)
            self.manage_system[4].append(text_temp_2)
            self.manage_system[5].append(label_temp_4)
            self.manage_system[6].append(text_temp_3)
            self.manage_system[7].append(text_temp_4)
            self.manage_system[8].append(label_temp_5)
            if increase_flag:
                height_cnt += 1
            weight_flag = not weight_flag
            increase_flag = not increase_flag
            list_id += 1

    # page7修改操作槽
    def page7FixControl(self):
        list_number = int(self.scrollArea_2_choose_line_edit.text())
        # if len(self.manage_system[0]) < list_number or list_number <= 0:
        #     self.textEdit.append("序列号不存在")
        #     return
        self.tryMysqlConnect()
        check_identify_message = '''select face_identification, fingerprint_identification from identity_message where email = %s;'''
        visit_message = self.manage_system[1][list_number - 1].text()
        telephone_message = visit_message[visit_message.find("邮箱:") + 3:]
        self.cursor.execute(check_identify_message, [telephone_message])
        indentify_message = self.cursor.fetchone()
        pass_flag = None
        # print(self.scrollArea_2_fix_pushbutton_flag)
        if not self.scrollArea_2_fix_pushbutton_flag:
            # if not self.scrollArea_2_fix_pushbutton_flag:
            if self.fix_medicine_pass_flag is False:  # 人脸
                begin_face = indentify_message[0].rfind('/')
                pass_flag = face_rec_model.TestFace(indentify_message[0][begin_face + 1:])
                if pass_flag != "":
                    pass_flag = True
                else:
                    pass_flag = False
                if pass_flag:
                    self.text_edit_queue.put("人脸验证通过")
                else:
                    self.text_edit_queue.put("人脸校对失败")
                    return
                # if indentify_message[1] and not pass_flag:
            if self.fix_medicine_pass_flag is True:  # 指纹
                fingerprint_id = finger_rec.CheckFingerprint(self.text_edit_queue, telephone_message)
                if fingerprint_id != "":
                    # self.textEdit.append("\n" + fingerprint_id + "用户验证成功")
                    self.text_edit_queue.put(f"{fingerprint_id}用户验证成功")
                    pass_flag = True
                else:
                    # self.textEdit.append("\n指纹认证有误")
                    self.text_edit_queue.put("指纹认证有误")
                    return
            # if pass_flag is None or pass_flag:
            self.scrollArea_2_fix_pushbutton_flag = True
            # self.scrollArea_2_fix_pushbutton.setText("保存")
            self.prev_date = int(self.manage_system[7][list_number - 1].text())
            if pass_flag is None:
                self.text_edit_queue.put("无需身份验证")
                # self.textEdit.append("\n无需身份验证")
            for i in (4, 7):
                self.manage_system[i][list_number - 1].setReadOnly(False)
            self.scrollArea_2_choose_line_edit.setReadOnly(True)
            self.text_edit_queue.put("可修改疗程与用量")
        else:
            src_date_cmd = '''select treatment_duration from medicate_condition join medicine_box mb on mb.box_id = 
                medicate_condition.box_id where medicine_name = %s limit 1;'''
            self.cursor.execute(src_date_cmd, [self.manage_system[6][list_number - 1].text()])
            src_date = self.cursor.fetchone()
            next_date = int(self.manage_system[7][list_number - 1].text())
            update_cmd = '''update medicate_condition
                set usage_times = %s, dosage = %s,treatment_duration = %s
                where personal_id = (select personal_id from identity_message where email = %s)
                and box_id in (select box_id from medicine_box where medicine_name = %s);'''
            self.cursor.execute(update_cmd, [int(self.manage_system[3][list_number - 1].text()),
                                             int(self.manage_system[4][list_number - 1].text()),
                                             src_date[0] - (self.prev_date - next_date),
                                             telephone_message,
                                             self.manage_system[6][list_number - 1].text()])
            # read_new_message = '''select usage_times, dosage, treatment_duration from medicate_condition where
            #     personal_id = (select personal_id from identity_message where email = %s)
            #     and box_id in (select box_id from medicine_box where medicine_name = %s);'''
            # self.cursor.execute(read_new_message, [telephone_message, self.manage_system[6][list_number-1].text()])
            # new_medicine_message = self.cursor.fetchone()
            # self.manage_system[3][list_number-1].setText(str(new_medicine_message[0]))
            # self.manage_system[4][list_number-1].setText(str(new_medicine_message[1]))
            # self.manage_system[7][list_number-1].setText(str(next_date))
            self.scrollArea_2_fix_pushbutton_flag = False
            self.fix_medicine_pass_flag = None
            for i in (4, 7):
                self.manage_system[i][list_number - 1].setReadOnly(True)
            self.scrollArea_2_choose_line_edit.setReadOnly(False)
            # self.scrollArea_2_fix_pushbutton.setText("修改")
            self.db.commit()
            # self.updatePage6()  # 更新7Page同步6page
            self.timer_update6_flag = True
            # self.timer_update7_flag = True
            self.text_edit_queue.put("保存成功")
            # self.textEdit.append("保存成功")

    # page7移除信息操作
    def page7RemoveControl(self):
        list_number = int(self.scrollArea_2_choose_line_edit.text())
        # if len(self.manage_system[0]) < list_number or list_number <= 0:
        #     self.text_edit_queue.put("序列号不存在")
        #     return
        self.tryMysqlConnect()
        if self.cursor is None:
            self.cursor = self.db.cursor()
        check_identify_message = '''select face_identification, fingerprint_identification, personal_name, personal_sex from 
            identity_message where email = %s;'''
        visit_message = self.manage_system[1][list_number - 1].text()
        telephone_message = visit_message[visit_message.find("邮箱:") + 3:]
        self.cursor.execute(check_identify_message, [telephone_message])
        indentify_message = self.cursor.fetchone()
        # if not self.scrollArea_2_remove_pushbutton_flag:
        #     pass_flag = None
        #     # 人脸是否存在
        #     if indentify_message[0] != "":
        #         begin_face = indentify_message[0].rfind('/')
        #         pass_flag = face_rec.TestFace(indentify_message[0][begin_face+1:])
        #         self.textEdit.append("\n人脸验证通过")
        #     else:
        #         self.textEdit.append("\n人脸信息不存在")
        #     if indentify_message[1] and not pass_flag:
        #         fingerprint_id = finger_rec.CheckFingerprint(self.textEdit, telephone_message)
        #         if fingerprint_id != "":
        #             self.textEdit.append("\n" + fingerprint_id + "用户验证成功")
        #             pass_flag = True
        #         else:
        #             self.textEdit.append("\n指纹认证有误")
        #     elif not indentify_message[1]:
        #         self.textEdit.append("\n指纹信息不存在")
        pass_flag = None
        if self.remove_medicine_pass_flag is False:  # 人脸
            begin_face = indentify_message[0].rfind('/')
            pass_flag = face_rec_model.TestFace(indentify_message[0][begin_face + 1:])
            if pass_flag != "":
                pass_flag = True
            else:
                pass_flag = False
            if pass_flag:
                self.text_edit_queue.put("人脸验证通过")
            else:
                self.text_edit_queue.put("人脸校对失败")
                return
            # if indentify_message[1] and not pass_flag:
        if self.remove_medicine_pass_flag is True:  # 指纹
            fingerprint_id = finger_rec.CheckFingerprint(self.text_edit_queue, telephone_message)
            if fingerprint_id != "":
                # self.textEdit.append("\n" + fingerprint_id + "用户验证成功")
                self.text_edit_queue.put(f"{fingerprint_id}用户验证成功")
                pass_flag = True
            else:
                # self.textEdit.append("\n指纹认证有误")
                self.text_edit_queue.put("指纹认证有误")
                return
        deleter_cmd = '''delete from medicate_condition where personal_id = (select personal_id from identity_message 
        where email = %s) and box_id in (select box_id from medicine_box where medicine_name = %s);'''
        self.cursor.execute(deleter_cmd, [telephone_message, self.manage_system[6][list_number - 1].text()])
        deleter_cmd_2 = '''delete from medicine_record where personal_id = (select personal_id from identity_message 
        where email = %s) and box_id in (select box_id from medicine_box where medicine_name = %s);'''
        self.cursor.execute(deleter_cmd_2, [telephone_message, self.manage_system[6][list_number - 1].text()])
        self.db.commit()
        self.text_edit_queue.put("\n数据删除成功")
        # self.updatePage6()
        self.timer_update6_flag = True
        self.timer_update7_flag = True
        # self.stackedWidget.setCurrentIndex(6)
        self.remove_medicine_pass_flag = None

    def gestureOpenMedicineBox(self):
        res_index = gesture_rec.OpenAssignMedicineBox(self.text_edit_queue)
        if res_index == 0:
            self.text_edit_queue.put("药盒打开取消")
            return
        if res_index is None:
            self.text_edit_queue.put("请表达手势")
            return
        self.textEdit_27.setText(str(res_index))
        self.showPage5()


    # 析构函数
    def __del__(self):
        # 关闭游标和连接
        if self.cursor:
            self.cursor.close()
        if self.db.is_connected():
            self.db.close()
